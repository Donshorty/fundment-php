<?php
/**
 * ClientAppCreateSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ClientAppCreateSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ClientAppCreateSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ClientAppCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_name' => 'string',
        'app_title' => 'string',
        'grant_type' => '\OpenAPI\Client\Model\GrantType',
        'batch_app' => 'bool',
        'redirect_uri' => 'string',
        'network_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_name' => null,
        'app_title' => null,
        'grant_type' => null,
        'batch_app' => null,
        'redirect_uri' => 'uri',
        'network_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_name' => false,
        'app_title' => false,
        'grant_type' => false,
        'batch_app' => false,
        'redirect_uri' => false,
        'network_code' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_name' => 'app_name',
        'app_title' => 'app_title',
        'grant_type' => 'grant_type',
        'batch_app' => 'batch_app',
        'redirect_uri' => 'redirect_uri',
        'network_code' => 'network_code'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_name' => 'setAppName',
        'app_title' => 'setAppTitle',
        'grant_type' => 'setGrantType',
        'batch_app' => 'setBatchApp',
        'redirect_uri' => 'setRedirectUri',
        'network_code' => 'setNetworkCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_name' => 'getAppName',
        'app_title' => 'getAppTitle',
        'grant_type' => 'getGrantType',
        'batch_app' => 'getBatchApp',
        'redirect_uri' => 'getRedirectUri',
        'network_code' => 'getNetworkCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('app_name', $data ?? [], null);
        $this->setIfExists('app_title', $data ?? [], null);
        $this->setIfExists('grant_type', $data ?? [], null);
        $this->setIfExists('batch_app', $data ?? [], null);
        $this->setIfExists('redirect_uri', $data ?? [], null);
        $this->setIfExists('network_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_name'] === null) {
            $invalidProperties[] = "'app_name' can't be null";
        }
        if ($this->container['app_title'] === null) {
            $invalidProperties[] = "'app_title' can't be null";
        }
        if ($this->container['grant_type'] === null) {
            $invalidProperties[] = "'grant_type' can't be null";
        }
        if ($this->container['batch_app'] === null) {
            $invalidProperties[] = "'batch_app' can't be null";
        }
        if ($this->container['redirect_uri'] === null) {
            $invalidProperties[] = "'redirect_uri' can't be null";
        }
        if ((mb_strlen($this->container['redirect_uri']) > 2083)) {
            $invalidProperties[] = "invalid value for 'redirect_uri', the character length must be smaller than or equal to 2083.";
        }

        if ((mb_strlen($this->container['redirect_uri']) < 1)) {
            $invalidProperties[] = "invalid value for 'redirect_uri', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['network_code']) && (mb_strlen($this->container['network_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'network_code', the character length must be smaller than or equal to 6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_name
     *
     * @return string
     */
    public function getAppName()
    {
        return $this->container['app_name'];
    }

    /**
     * Sets app_name
     *
     * @param string $app_name app_name
     *
     * @return self
     */
    public function setAppName($app_name)
    {
        if (is_null($app_name)) {
            throw new \InvalidArgumentException('non-nullable app_name cannot be null');
        }
        $this->container['app_name'] = $app_name;

        return $this;
    }

    /**
     * Gets app_title
     *
     * @return string
     */
    public function getAppTitle()
    {
        return $this->container['app_title'];
    }

    /**
     * Sets app_title
     *
     * @param string $app_title app_title
     *
     * @return self
     */
    public function setAppTitle($app_title)
    {
        if (is_null($app_title)) {
            throw new \InvalidArgumentException('non-nullable app_title cannot be null');
        }
        $this->container['app_title'] = $app_title;

        return $this;
    }

    /**
     * Gets grant_type
     *
     * @return \OpenAPI\Client\Model\GrantType
     */
    public function getGrantType()
    {
        return $this->container['grant_type'];
    }

    /**
     * Sets grant_type
     *
     * @param \OpenAPI\Client\Model\GrantType $grant_type grant_type
     *
     * @return self
     */
    public function setGrantType($grant_type)
    {
        if (is_null($grant_type)) {
            throw new \InvalidArgumentException('non-nullable grant_type cannot be null');
        }
        $this->container['grant_type'] = $grant_type;

        return $this;
    }

    /**
     * Gets batch_app
     *
     * @return bool
     */
    public function getBatchApp()
    {
        return $this->container['batch_app'];
    }

    /**
     * Sets batch_app
     *
     * @param bool $batch_app batch_app
     *
     * @return self
     */
    public function setBatchApp($batch_app)
    {
        if (is_null($batch_app)) {
            throw new \InvalidArgumentException('non-nullable batch_app cannot be null');
        }
        $this->container['batch_app'] = $batch_app;

        return $this;
    }

    /**
     * Gets redirect_uri
     *
     * @return string
     */
    public function getRedirectUri()
    {
        return $this->container['redirect_uri'];
    }

    /**
     * Sets redirect_uri
     *
     * @param string $redirect_uri redirect_uri
     *
     * @return self
     */
    public function setRedirectUri($redirect_uri)
    {
        if (is_null($redirect_uri)) {
            throw new \InvalidArgumentException('non-nullable redirect_uri cannot be null');
        }
        if ((mb_strlen($redirect_uri) > 2083)) {
            throw new \InvalidArgumentException('invalid length for $redirect_uri when calling ClientAppCreateSchema., must be smaller than or equal to 2083.');
        }
        if ((mb_strlen($redirect_uri) < 1)) {
            throw new \InvalidArgumentException('invalid length for $redirect_uri when calling ClientAppCreateSchema., must be bigger than or equal to 1.');
        }

        $this->container['redirect_uri'] = $redirect_uri;

        return $this;
    }

    /**
     * Gets network_code
     *
     * @return string|null
     */
    public function getNetworkCode()
    {
        return $this->container['network_code'];
    }

    /**
     * Sets network_code
     *
     * @param string|null $network_code network_code
     *
     * @return self
     */
    public function setNetworkCode($network_code)
    {
        if (is_null($network_code)) {
            throw new \InvalidArgumentException('non-nullable network_code cannot be null');
        }
        if ((mb_strlen($network_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $network_code when calling ClientAppCreateSchema., must be smaller than or equal to 6.');
        }

        $this->container['network_code'] = $network_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


