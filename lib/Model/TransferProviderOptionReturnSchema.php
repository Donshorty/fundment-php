<?php
/**
 * TransferProviderOptionReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransferProviderOptionReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransferProviderOptionReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransferProviderOptionReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'information_request' => 'bool',
        'partial_transfer' => 'bool',
        'bacs_isa_transfer' => 'bool',
        'bacs_service_user_number' => 'string',
        'electronic_portfolio_transfer_conversion' => 'bool',
        'electronic_conversion_instruction' => 'bool',
        'auto_convert_share_class_pre_transfer' => 'bool',
        'auto_convert_share_class_post_transfer' => 'bool',
        'date_updated' => '\DateTime',
        'reference_pattern' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'information_request' => null,
        'partial_transfer' => null,
        'bacs_isa_transfer' => null,
        'bacs_service_user_number' => null,
        'electronic_portfolio_transfer_conversion' => null,
        'electronic_conversion_instruction' => null,
        'auto_convert_share_class_pre_transfer' => null,
        'auto_convert_share_class_post_transfer' => null,
        'date_updated' => 'date-time',
        'reference_pattern' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'information_request' => false,
        'partial_transfer' => false,
        'bacs_isa_transfer' => false,
        'bacs_service_user_number' => false,
        'electronic_portfolio_transfer_conversion' => false,
        'electronic_conversion_instruction' => false,
        'auto_convert_share_class_pre_transfer' => false,
        'auto_convert_share_class_post_transfer' => false,
        'date_updated' => false,
        'reference_pattern' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'information_request' => 'information_request',
        'partial_transfer' => 'partial_transfer',
        'bacs_isa_transfer' => 'bacs_isa_transfer',
        'bacs_service_user_number' => 'bacs_service_user_number',
        'electronic_portfolio_transfer_conversion' => 'electronic_portfolio_transfer_conversion',
        'electronic_conversion_instruction' => 'electronic_conversion_instruction',
        'auto_convert_share_class_pre_transfer' => 'auto_convert_share_class_pre_transfer',
        'auto_convert_share_class_post_transfer' => 'auto_convert_share_class_post_transfer',
        'date_updated' => 'date_updated',
        'reference_pattern' => 'reference_pattern'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'information_request' => 'setInformationRequest',
        'partial_transfer' => 'setPartialTransfer',
        'bacs_isa_transfer' => 'setBacsIsaTransfer',
        'bacs_service_user_number' => 'setBacsServiceUserNumber',
        'electronic_portfolio_transfer_conversion' => 'setElectronicPortfolioTransferConversion',
        'electronic_conversion_instruction' => 'setElectronicConversionInstruction',
        'auto_convert_share_class_pre_transfer' => 'setAutoConvertShareClassPreTransfer',
        'auto_convert_share_class_post_transfer' => 'setAutoConvertShareClassPostTransfer',
        'date_updated' => 'setDateUpdated',
        'reference_pattern' => 'setReferencePattern'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'information_request' => 'getInformationRequest',
        'partial_transfer' => 'getPartialTransfer',
        'bacs_isa_transfer' => 'getBacsIsaTransfer',
        'bacs_service_user_number' => 'getBacsServiceUserNumber',
        'electronic_portfolio_transfer_conversion' => 'getElectronicPortfolioTransferConversion',
        'electronic_conversion_instruction' => 'getElectronicConversionInstruction',
        'auto_convert_share_class_pre_transfer' => 'getAutoConvertShareClassPreTransfer',
        'auto_convert_share_class_post_transfer' => 'getAutoConvertShareClassPostTransfer',
        'date_updated' => 'getDateUpdated',
        'reference_pattern' => 'getReferencePattern'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('information_request', $data ?? [], null);
        $this->setIfExists('partial_transfer', $data ?? [], null);
        $this->setIfExists('bacs_isa_transfer', $data ?? [], null);
        $this->setIfExists('bacs_service_user_number', $data ?? [], null);
        $this->setIfExists('electronic_portfolio_transfer_conversion', $data ?? [], null);
        $this->setIfExists('electronic_conversion_instruction', $data ?? [], null);
        $this->setIfExists('auto_convert_share_class_pre_transfer', $data ?? [], null);
        $this->setIfExists('auto_convert_share_class_post_transfer', $data ?? [], null);
        $this->setIfExists('date_updated', $data ?? [], null);
        $this->setIfExists('reference_pattern', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['information_request'] === null) {
            $invalidProperties[] = "'information_request' can't be null";
        }
        if ($this->container['partial_transfer'] === null) {
            $invalidProperties[] = "'partial_transfer' can't be null";
        }
        if ($this->container['bacs_isa_transfer'] === null) {
            $invalidProperties[] = "'bacs_isa_transfer' can't be null";
        }
        if ($this->container['electronic_portfolio_transfer_conversion'] === null) {
            $invalidProperties[] = "'electronic_portfolio_transfer_conversion' can't be null";
        }
        if ($this->container['electronic_conversion_instruction'] === null) {
            $invalidProperties[] = "'electronic_conversion_instruction' can't be null";
        }
        if ($this->container['auto_convert_share_class_pre_transfer'] === null) {
            $invalidProperties[] = "'auto_convert_share_class_pre_transfer' can't be null";
        }
        if ($this->container['auto_convert_share_class_post_transfer'] === null) {
            $invalidProperties[] = "'auto_convert_share_class_post_transfer' can't be null";
        }
        if ($this->container['date_updated'] === null) {
            $invalidProperties[] = "'date_updated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets information_request
     *
     * @return bool
     */
    public function getInformationRequest()
    {
        return $this->container['information_request'];
    }

    /**
     * Sets information_request
     *
     * @param bool $information_request information_request
     *
     * @return self
     */
    public function setInformationRequest($information_request)
    {
        if (is_null($information_request)) {
            throw new \InvalidArgumentException('non-nullable information_request cannot be null');
        }
        $this->container['information_request'] = $information_request;

        return $this;
    }

    /**
     * Gets partial_transfer
     *
     * @return bool
     */
    public function getPartialTransfer()
    {
        return $this->container['partial_transfer'];
    }

    /**
     * Sets partial_transfer
     *
     * @param bool $partial_transfer partial_transfer
     *
     * @return self
     */
    public function setPartialTransfer($partial_transfer)
    {
        if (is_null($partial_transfer)) {
            throw new \InvalidArgumentException('non-nullable partial_transfer cannot be null');
        }
        $this->container['partial_transfer'] = $partial_transfer;

        return $this;
    }

    /**
     * Gets bacs_isa_transfer
     *
     * @return bool
     */
    public function getBacsIsaTransfer()
    {
        return $this->container['bacs_isa_transfer'];
    }

    /**
     * Sets bacs_isa_transfer
     *
     * @param bool $bacs_isa_transfer bacs_isa_transfer
     *
     * @return self
     */
    public function setBacsIsaTransfer($bacs_isa_transfer)
    {
        if (is_null($bacs_isa_transfer)) {
            throw new \InvalidArgumentException('non-nullable bacs_isa_transfer cannot be null');
        }
        $this->container['bacs_isa_transfer'] = $bacs_isa_transfer;

        return $this;
    }

    /**
     * Gets bacs_service_user_number
     *
     * @return string|null
     */
    public function getBacsServiceUserNumber()
    {
        return $this->container['bacs_service_user_number'];
    }

    /**
     * Sets bacs_service_user_number
     *
     * @param string|null $bacs_service_user_number bacs_service_user_number
     *
     * @return self
     */
    public function setBacsServiceUserNumber($bacs_service_user_number)
    {
        if (is_null($bacs_service_user_number)) {
            throw new \InvalidArgumentException('non-nullable bacs_service_user_number cannot be null');
        }
        $this->container['bacs_service_user_number'] = $bacs_service_user_number;

        return $this;
    }

    /**
     * Gets electronic_portfolio_transfer_conversion
     *
     * @return bool
     */
    public function getElectronicPortfolioTransferConversion()
    {
        return $this->container['electronic_portfolio_transfer_conversion'];
    }

    /**
     * Sets electronic_portfolio_transfer_conversion
     *
     * @param bool $electronic_portfolio_transfer_conversion electronic_portfolio_transfer_conversion
     *
     * @return self
     */
    public function setElectronicPortfolioTransferConversion($electronic_portfolio_transfer_conversion)
    {
        if (is_null($electronic_portfolio_transfer_conversion)) {
            throw new \InvalidArgumentException('non-nullable electronic_portfolio_transfer_conversion cannot be null');
        }
        $this->container['electronic_portfolio_transfer_conversion'] = $electronic_portfolio_transfer_conversion;

        return $this;
    }

    /**
     * Gets electronic_conversion_instruction
     *
     * @return bool
     */
    public function getElectronicConversionInstruction()
    {
        return $this->container['electronic_conversion_instruction'];
    }

    /**
     * Sets electronic_conversion_instruction
     *
     * @param bool $electronic_conversion_instruction electronic_conversion_instruction
     *
     * @return self
     */
    public function setElectronicConversionInstruction($electronic_conversion_instruction)
    {
        if (is_null($electronic_conversion_instruction)) {
            throw new \InvalidArgumentException('non-nullable electronic_conversion_instruction cannot be null');
        }
        $this->container['electronic_conversion_instruction'] = $electronic_conversion_instruction;

        return $this;
    }

    /**
     * Gets auto_convert_share_class_pre_transfer
     *
     * @return bool
     */
    public function getAutoConvertShareClassPreTransfer()
    {
        return $this->container['auto_convert_share_class_pre_transfer'];
    }

    /**
     * Sets auto_convert_share_class_pre_transfer
     *
     * @param bool $auto_convert_share_class_pre_transfer auto_convert_share_class_pre_transfer
     *
     * @return self
     */
    public function setAutoConvertShareClassPreTransfer($auto_convert_share_class_pre_transfer)
    {
        if (is_null($auto_convert_share_class_pre_transfer)) {
            throw new \InvalidArgumentException('non-nullable auto_convert_share_class_pre_transfer cannot be null');
        }
        $this->container['auto_convert_share_class_pre_transfer'] = $auto_convert_share_class_pre_transfer;

        return $this;
    }

    /**
     * Gets auto_convert_share_class_post_transfer
     *
     * @return bool
     */
    public function getAutoConvertShareClassPostTransfer()
    {
        return $this->container['auto_convert_share_class_post_transfer'];
    }

    /**
     * Sets auto_convert_share_class_post_transfer
     *
     * @param bool $auto_convert_share_class_post_transfer auto_convert_share_class_post_transfer
     *
     * @return self
     */
    public function setAutoConvertShareClassPostTransfer($auto_convert_share_class_post_transfer)
    {
        if (is_null($auto_convert_share_class_post_transfer)) {
            throw new \InvalidArgumentException('non-nullable auto_convert_share_class_post_transfer cannot be null');
        }
        $this->container['auto_convert_share_class_post_transfer'] = $auto_convert_share_class_post_transfer;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime $date_updated date_updated
     *
     * @return self
     */
    public function setDateUpdated($date_updated)
    {
        if (is_null($date_updated)) {
            throw new \InvalidArgumentException('non-nullable date_updated cannot be null');
        }
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets reference_pattern
     *
     * @return string|null
     */
    public function getReferencePattern()
    {
        return $this->container['reference_pattern'];
    }

    /**
     * Sets reference_pattern
     *
     * @param string|null $reference_pattern reference_pattern
     *
     * @return self
     */
    public function setReferencePattern($reference_pattern)
    {
        if (is_null($reference_pattern)) {
            throw new \InvalidArgumentException('non-nullable reference_pattern cannot be null');
        }
        $this->container['reference_pattern'] = $reference_pattern;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


