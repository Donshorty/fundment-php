<?php
/**
 * SecurityTransactionReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SecurityTransactionReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SecurityTransactionReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SecurityTransactionReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_type' => '\OpenAPI\Client\Model\TransactionType',
        'order_ref' => 'string',
        'security_ref' => 'int',
        'price' => 'float',
        'quantity' => 'float',
        'currency' => 'string',
        'description' => 'string',
        'transaction_datetime' => '\DateTime',
        'trade_date' => '\DateTime',
        'settlement_date' => '\DateTime',
        'venue_code' => 'string',
        'order_type' => 'string',
        'is_broker_principal' => 'bool',
        'stamp_duty' => 'float',
        'ptm_levy' => 'float',
        'fx_charges' => 'float',
        'commission' => 'float',
        'initial_charge' => 'float',
        'net_consideration' => 'float',
        'book_cost' => 'float',
        'broker' => '\OpenAPI\Client\Model\Broker',
        'updated_on' => '\DateTime',
        'status' => '\OpenAPI\Client\Model\FapiDbUserSecurityTransactionStatus',
        'reporting_status' => '\OpenAPI\Client\Model\ReportingStatus',
        'reporting_ref' => 'string',
        'ref' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_type' => null,
        'order_ref' => null,
        'security_ref' => null,
        'price' => null,
        'quantity' => null,
        'currency' => null,
        'description' => null,
        'transaction_datetime' => 'date-time',
        'trade_date' => 'date',
        'settlement_date' => 'date',
        'venue_code' => null,
        'order_type' => null,
        'is_broker_principal' => null,
        'stamp_duty' => null,
        'ptm_levy' => null,
        'fx_charges' => null,
        'commission' => null,
        'initial_charge' => null,
        'net_consideration' => null,
        'book_cost' => null,
        'broker' => null,
        'updated_on' => 'date-time',
        'status' => null,
        'reporting_status' => null,
        'reporting_ref' => null,
        'ref' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'transaction_type' => false,
        'order_ref' => false,
        'security_ref' => false,
        'price' => false,
        'quantity' => false,
        'currency' => false,
        'description' => false,
        'transaction_datetime' => false,
        'trade_date' => false,
        'settlement_date' => false,
        'venue_code' => false,
        'order_type' => false,
        'is_broker_principal' => false,
        'stamp_duty' => false,
        'ptm_levy' => false,
        'fx_charges' => false,
        'commission' => false,
        'initial_charge' => false,
        'net_consideration' => false,
        'book_cost' => false,
        'broker' => false,
        'updated_on' => false,
        'status' => false,
        'reporting_status' => false,
        'reporting_ref' => false,
        'ref' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_type' => 'transaction_type',
        'order_ref' => 'order_ref',
        'security_ref' => 'security_ref',
        'price' => 'price',
        'quantity' => 'quantity',
        'currency' => 'currency',
        'description' => 'description',
        'transaction_datetime' => 'transaction_datetime',
        'trade_date' => 'trade_date',
        'settlement_date' => 'settlement_date',
        'venue_code' => 'venue_code',
        'order_type' => 'order_type',
        'is_broker_principal' => 'is_broker_principal',
        'stamp_duty' => 'stamp_duty',
        'ptm_levy' => 'ptm_levy',
        'fx_charges' => 'fx_charges',
        'commission' => 'commission',
        'initial_charge' => 'initial_charge',
        'net_consideration' => 'net_consideration',
        'book_cost' => 'book_cost',
        'broker' => 'broker',
        'updated_on' => 'updated_on',
        'status' => 'status',
        'reporting_status' => 'reporting_status',
        'reporting_ref' => 'reporting_ref',
        'ref' => 'ref'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_type' => 'setTransactionType',
        'order_ref' => 'setOrderRef',
        'security_ref' => 'setSecurityRef',
        'price' => 'setPrice',
        'quantity' => 'setQuantity',
        'currency' => 'setCurrency',
        'description' => 'setDescription',
        'transaction_datetime' => 'setTransactionDatetime',
        'trade_date' => 'setTradeDate',
        'settlement_date' => 'setSettlementDate',
        'venue_code' => 'setVenueCode',
        'order_type' => 'setOrderType',
        'is_broker_principal' => 'setIsBrokerPrincipal',
        'stamp_duty' => 'setStampDuty',
        'ptm_levy' => 'setPtmLevy',
        'fx_charges' => 'setFxCharges',
        'commission' => 'setCommission',
        'initial_charge' => 'setInitialCharge',
        'net_consideration' => 'setNetConsideration',
        'book_cost' => 'setBookCost',
        'broker' => 'setBroker',
        'updated_on' => 'setUpdatedOn',
        'status' => 'setStatus',
        'reporting_status' => 'setReportingStatus',
        'reporting_ref' => 'setReportingRef',
        'ref' => 'setRef'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_type' => 'getTransactionType',
        'order_ref' => 'getOrderRef',
        'security_ref' => 'getSecurityRef',
        'price' => 'getPrice',
        'quantity' => 'getQuantity',
        'currency' => 'getCurrency',
        'description' => 'getDescription',
        'transaction_datetime' => 'getTransactionDatetime',
        'trade_date' => 'getTradeDate',
        'settlement_date' => 'getSettlementDate',
        'venue_code' => 'getVenueCode',
        'order_type' => 'getOrderType',
        'is_broker_principal' => 'getIsBrokerPrincipal',
        'stamp_duty' => 'getStampDuty',
        'ptm_levy' => 'getPtmLevy',
        'fx_charges' => 'getFxCharges',
        'commission' => 'getCommission',
        'initial_charge' => 'getInitialCharge',
        'net_consideration' => 'getNetConsideration',
        'book_cost' => 'getBookCost',
        'broker' => 'getBroker',
        'updated_on' => 'getUpdatedOn',
        'status' => 'getStatus',
        'reporting_status' => 'getReportingStatus',
        'reporting_ref' => 'getReportingRef',
        'ref' => 'getRef'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('order_ref', $data ?? [], null);
        $this->setIfExists('security_ref', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], 'GBP');
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('transaction_datetime', $data ?? [], null);
        $this->setIfExists('trade_date', $data ?? [], null);
        $this->setIfExists('settlement_date', $data ?? [], null);
        $this->setIfExists('venue_code', $data ?? [], null);
        $this->setIfExists('order_type', $data ?? [], null);
        $this->setIfExists('is_broker_principal', $data ?? [], true);
        $this->setIfExists('stamp_duty', $data ?? [], null);
        $this->setIfExists('ptm_levy', $data ?? [], null);
        $this->setIfExists('fx_charges', $data ?? [], null);
        $this->setIfExists('commission', $data ?? [], null);
        $this->setIfExists('initial_charge', $data ?? [], null);
        $this->setIfExists('net_consideration', $data ?? [], null);
        $this->setIfExists('book_cost', $data ?? [], null);
        $this->setIfExists('broker', $data ?? [], null);
        $this->setIfExists('updated_on', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('reporting_status', $data ?? [], null);
        $this->setIfExists('reporting_ref', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_type'] === null) {
            $invalidProperties[] = "'transaction_type' can't be null";
        }
        if ($this->container['order_ref'] === null) {
            $invalidProperties[] = "'order_ref' can't be null";
        }
        if ($this->container['security_ref'] === null) {
            $invalidProperties[] = "'security_ref' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if (!is_null($this->container['currency']) && !preg_match("/^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNH|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RMB|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|XSU|YER|ZAR|ZMW|ZWL)$/", $this->container['currency'])) {
            $invalidProperties[] = "invalid value for 'currency', must be conform to the pattern /^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNH|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RMB|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|XSU|YER|ZAR|ZMW|ZWL)$/.";
        }

        if ($this->container['transaction_datetime'] === null) {
            $invalidProperties[] = "'transaction_datetime' can't be null";
        }
        if ($this->container['trade_date'] === null) {
            $invalidProperties[] = "'trade_date' can't be null";
        }
        if ($this->container['settlement_date'] === null) {
            $invalidProperties[] = "'settlement_date' can't be null";
        }
        if (!is_null($this->container['venue_code']) && (mb_strlen($this->container['venue_code']) > 5)) {
            $invalidProperties[] = "invalid value for 'venue_code', the character length must be smaller than or equal to 5.";
        }

        if (!is_null($this->container['order_type']) && (mb_strlen($this->container['order_type']) > 15)) {
            $invalidProperties[] = "invalid value for 'order_type', the character length must be smaller than or equal to 15.";
        }

        if ($this->container['broker'] === null) {
            $invalidProperties[] = "'broker' can't be null";
        }
        if ($this->container['updated_on'] === null) {
            $invalidProperties[] = "'updated_on' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_type
     *
     * @return \OpenAPI\Client\Model\TransactionType
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param \OpenAPI\Client\Model\TransactionType $transaction_type transaction_type
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            throw new \InvalidArgumentException('non-nullable transaction_type cannot be null');
        }
        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets order_ref
     *
     * @return string
     */
    public function getOrderRef()
    {
        return $this->container['order_ref'];
    }

    /**
     * Sets order_ref
     *
     * @param string $order_ref order_ref
     *
     * @return self
     */
    public function setOrderRef($order_ref)
    {
        if (is_null($order_ref)) {
            throw new \InvalidArgumentException('non-nullable order_ref cannot be null');
        }
        $this->container['order_ref'] = $order_ref;

        return $this;
    }

    /**
     * Gets security_ref
     *
     * @return int
     */
    public function getSecurityRef()
    {
        return $this->container['security_ref'];
    }

    /**
     * Sets security_ref
     *
     * @param int $security_ref security_ref
     *
     * @return self
     */
    public function setSecurityRef($security_ref)
    {
        if (is_null($security_ref)) {
            throw new \InvalidArgumentException('non-nullable security_ref cannot be null');
        }
        $this->container['security_ref'] = $security_ref;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Must be an ISO 4217 currency code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        if ((!preg_match("/^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNH|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RMB|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|XSU|YER|ZAR|ZMW|ZWL)$/", ObjectSerializer::toString($currency)))) {
            throw new \InvalidArgumentException("invalid value for \$currency when calling SecurityTransactionReturnSchema., must conform to the pattern /^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNH|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RMB|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|XSU|YER|ZAR|ZMW|ZWL)$/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets transaction_datetime
     *
     * @return \DateTime
     */
    public function getTransactionDatetime()
    {
        return $this->container['transaction_datetime'];
    }

    /**
     * Sets transaction_datetime
     *
     * @param \DateTime $transaction_datetime transaction_datetime
     *
     * @return self
     */
    public function setTransactionDatetime($transaction_datetime)
    {
        if (is_null($transaction_datetime)) {
            throw new \InvalidArgumentException('non-nullable transaction_datetime cannot be null');
        }
        $this->container['transaction_datetime'] = $transaction_datetime;

        return $this;
    }

    /**
     * Gets trade_date
     *
     * @return \DateTime
     */
    public function getTradeDate()
    {
        return $this->container['trade_date'];
    }

    /**
     * Sets trade_date
     *
     * @param \DateTime $trade_date trade_date
     *
     * @return self
     */
    public function setTradeDate($trade_date)
    {
        if (is_null($trade_date)) {
            throw new \InvalidArgumentException('non-nullable trade_date cannot be null');
        }
        $this->container['trade_date'] = $trade_date;

        return $this;
    }

    /**
     * Gets settlement_date
     *
     * @return \DateTime
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     *
     * @param \DateTime $settlement_date settlement_date
     *
     * @return self
     */
    public function setSettlementDate($settlement_date)
    {
        if (is_null($settlement_date)) {
            throw new \InvalidArgumentException('non-nullable settlement_date cannot be null');
        }
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets venue_code
     *
     * @return string|null
     */
    public function getVenueCode()
    {
        return $this->container['venue_code'];
    }

    /**
     * Sets venue_code
     *
     * @param string|null $venue_code venue_code
     *
     * @return self
     */
    public function setVenueCode($venue_code)
    {
        if (is_null($venue_code)) {
            throw new \InvalidArgumentException('non-nullable venue_code cannot be null');
        }
        if ((mb_strlen($venue_code) > 5)) {
            throw new \InvalidArgumentException('invalid length for $venue_code when calling SecurityTransactionReturnSchema., must be smaller than or equal to 5.');
        }

        $this->container['venue_code'] = $venue_code;

        return $this;
    }

    /**
     * Gets order_type
     *
     * @return string|null
     */
    public function getOrderType()
    {
        return $this->container['order_type'];
    }

    /**
     * Sets order_type
     *
     * @param string|null $order_type order_type
     *
     * @return self
     */
    public function setOrderType($order_type)
    {
        if (is_null($order_type)) {
            throw new \InvalidArgumentException('non-nullable order_type cannot be null');
        }
        if ((mb_strlen($order_type) > 15)) {
            throw new \InvalidArgumentException('invalid length for $order_type when calling SecurityTransactionReturnSchema., must be smaller than or equal to 15.');
        }

        $this->container['order_type'] = $order_type;

        return $this;
    }

    /**
     * Gets is_broker_principal
     *
     * @return bool|null
     */
    public function getIsBrokerPrincipal()
    {
        return $this->container['is_broker_principal'];
    }

    /**
     * Sets is_broker_principal
     *
     * @param bool|null $is_broker_principal is_broker_principal
     *
     * @return self
     */
    public function setIsBrokerPrincipal($is_broker_principal)
    {
        if (is_null($is_broker_principal)) {
            throw new \InvalidArgumentException('non-nullable is_broker_principal cannot be null');
        }
        $this->container['is_broker_principal'] = $is_broker_principal;

        return $this;
    }

    /**
     * Gets stamp_duty
     *
     * @return float|null
     */
    public function getStampDuty()
    {
        return $this->container['stamp_duty'];
    }

    /**
     * Sets stamp_duty
     *
     * @param float|null $stamp_duty stamp_duty
     *
     * @return self
     */
    public function setStampDuty($stamp_duty)
    {
        if (is_null($stamp_duty)) {
            throw new \InvalidArgumentException('non-nullable stamp_duty cannot be null');
        }
        $this->container['stamp_duty'] = $stamp_duty;

        return $this;
    }

    /**
     * Gets ptm_levy
     *
     * @return float|null
     */
    public function getPtmLevy()
    {
        return $this->container['ptm_levy'];
    }

    /**
     * Sets ptm_levy
     *
     * @param float|null $ptm_levy ptm_levy
     *
     * @return self
     */
    public function setPtmLevy($ptm_levy)
    {
        if (is_null($ptm_levy)) {
            throw new \InvalidArgumentException('non-nullable ptm_levy cannot be null');
        }
        $this->container['ptm_levy'] = $ptm_levy;

        return $this;
    }

    /**
     * Gets fx_charges
     *
     * @return float|null
     */
    public function getFxCharges()
    {
        return $this->container['fx_charges'];
    }

    /**
     * Sets fx_charges
     *
     * @param float|null $fx_charges fx_charges
     *
     * @return self
     */
    public function setFxCharges($fx_charges)
    {
        if (is_null($fx_charges)) {
            throw new \InvalidArgumentException('non-nullable fx_charges cannot be null');
        }
        $this->container['fx_charges'] = $fx_charges;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return float|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param float|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {
        if (is_null($commission)) {
            throw new \InvalidArgumentException('non-nullable commission cannot be null');
        }
        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets initial_charge
     *
     * @return float|null
     */
    public function getInitialCharge()
    {
        return $this->container['initial_charge'];
    }

    /**
     * Sets initial_charge
     *
     * @param float|null $initial_charge initial_charge
     *
     * @return self
     */
    public function setInitialCharge($initial_charge)
    {
        if (is_null($initial_charge)) {
            throw new \InvalidArgumentException('non-nullable initial_charge cannot be null');
        }
        $this->container['initial_charge'] = $initial_charge;

        return $this;
    }

    /**
     * Gets net_consideration
     *
     * @return float|null
     */
    public function getNetConsideration()
    {
        return $this->container['net_consideration'];
    }

    /**
     * Sets net_consideration
     *
     * @param float|null $net_consideration net_consideration
     *
     * @return self
     */
    public function setNetConsideration($net_consideration)
    {
        if (is_null($net_consideration)) {
            throw new \InvalidArgumentException('non-nullable net_consideration cannot be null');
        }
        $this->container['net_consideration'] = $net_consideration;

        return $this;
    }

    /**
     * Gets book_cost
     *
     * @return float|null
     */
    public function getBookCost()
    {
        return $this->container['book_cost'];
    }

    /**
     * Sets book_cost
     *
     * @param float|null $book_cost book_cost
     *
     * @return self
     */
    public function setBookCost($book_cost)
    {
        if (is_null($book_cost)) {
            throw new \InvalidArgumentException('non-nullable book_cost cannot be null');
        }
        $this->container['book_cost'] = $book_cost;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return \OpenAPI\Client\Model\Broker
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param \OpenAPI\Client\Model\Broker $broker broker
     *
     * @return self
     */
    public function setBroker($broker)
    {
        if (is_null($broker)) {
            throw new \InvalidArgumentException('non-nullable broker cannot be null');
        }
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets updated_on
     *
     * @return \DateTime
     */
    public function getUpdatedOn()
    {
        return $this->container['updated_on'];
    }

    /**
     * Sets updated_on
     *
     * @param \DateTime $updated_on updated_on
     *
     * @return self
     */
    public function setUpdatedOn($updated_on)
    {
        if (is_null($updated_on)) {
            throw new \InvalidArgumentException('non-nullable updated_on cannot be null');
        }
        $this->container['updated_on'] = $updated_on;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\FapiDbUserSecurityTransactionStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\FapiDbUserSecurityTransactionStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets reporting_status
     *
     * @return \OpenAPI\Client\Model\ReportingStatus|null
     */
    public function getReportingStatus()
    {
        return $this->container['reporting_status'];
    }

    /**
     * Sets reporting_status
     *
     * @param \OpenAPI\Client\Model\ReportingStatus|null $reporting_status reporting_status
     *
     * @return self
     */
    public function setReportingStatus($reporting_status)
    {
        if (is_null($reporting_status)) {
            throw new \InvalidArgumentException('non-nullable reporting_status cannot be null');
        }
        $this->container['reporting_status'] = $reporting_status;

        return $this;
    }

    /**
     * Gets reporting_ref
     *
     * @return string|null
     */
    public function getReportingRef()
    {
        return $this->container['reporting_ref'];
    }

    /**
     * Sets reporting_ref
     *
     * @param string|null $reporting_ref reporting_ref
     *
     * @return self
     */
    public function setReportingRef($reporting_ref)
    {
        if (is_null($reporting_ref)) {
            throw new \InvalidArgumentException('non-nullable reporting_ref cannot be null');
        }
        $this->container['reporting_ref'] = $reporting_ref;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string|null
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string|null $ref ref
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


