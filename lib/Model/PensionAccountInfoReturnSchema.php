<?php
/**
 * PensionAccountInfoReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PensionAccountInfoReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PensionAccountInfoReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PensionAccountInfoReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'initial_tax_code' => 'string',
        'prev_taxable_income_rcvd' => 'float',
        'income_before_april_2006' => 'bool',
        'prev_lta_used' => 'float',
        'prev_tax_paid' => 'float',
        'mpaa_triggered' => 'bool',
        'serious_ill_health' => 'bool',
        'mpaa_triggered_date' => '\DateTime',
        'id' => 'int',
        'account_id' => 'int',
        'status' => 'string',
        'hmrc_protection_id' => 'int',
        'checked_manually' => 'bool',
        'pension_type' => '\OpenAPI\Client\Model\PensionTypes',
        'hmrc_protection' => '\OpenAPI\Client\Model\HMRCProtectionReturnSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'initial_tax_code' => null,
        'prev_taxable_income_rcvd' => null,
        'income_before_april_2006' => null,
        'prev_lta_used' => null,
        'prev_tax_paid' => null,
        'mpaa_triggered' => null,
        'serious_ill_health' => null,
        'mpaa_triggered_date' => 'date',
        'id' => null,
        'account_id' => null,
        'status' => null,
        'hmrc_protection_id' => null,
        'checked_manually' => null,
        'pension_type' => null,
        'hmrc_protection' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'initial_tax_code' => false,
        'prev_taxable_income_rcvd' => false,
        'income_before_april_2006' => false,
        'prev_lta_used' => false,
        'prev_tax_paid' => false,
        'mpaa_triggered' => false,
        'serious_ill_health' => false,
        'mpaa_triggered_date' => false,
        'id' => false,
        'account_id' => false,
        'status' => false,
        'hmrc_protection_id' => false,
        'checked_manually' => false,
        'pension_type' => false,
        'hmrc_protection' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'initial_tax_code' => 'initial_tax_code',
        'prev_taxable_income_rcvd' => 'prev_taxable_income_rcvd',
        'income_before_april_2006' => 'income_before_april_2006',
        'prev_lta_used' => 'prev_lta_used',
        'prev_tax_paid' => 'prev_tax_paid',
        'mpaa_triggered' => 'mpaa_triggered',
        'serious_ill_health' => 'serious_ill_health',
        'mpaa_triggered_date' => 'mpaa_triggered_date',
        'id' => 'id',
        'account_id' => 'account_id',
        'status' => 'status',
        'hmrc_protection_id' => 'hmrc_protection_id',
        'checked_manually' => 'checked_manually',
        'pension_type' => 'pension_type',
        'hmrc_protection' => 'hmrc_protection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'initial_tax_code' => 'setInitialTaxCode',
        'prev_taxable_income_rcvd' => 'setPrevTaxableIncomeRcvd',
        'income_before_april_2006' => 'setIncomeBeforeApril2006',
        'prev_lta_used' => 'setPrevLtaUsed',
        'prev_tax_paid' => 'setPrevTaxPaid',
        'mpaa_triggered' => 'setMpaaTriggered',
        'serious_ill_health' => 'setSeriousIllHealth',
        'mpaa_triggered_date' => 'setMpaaTriggeredDate',
        'id' => 'setId',
        'account_id' => 'setAccountId',
        'status' => 'setStatus',
        'hmrc_protection_id' => 'setHmrcProtectionId',
        'checked_manually' => 'setCheckedManually',
        'pension_type' => 'setPensionType',
        'hmrc_protection' => 'setHmrcProtection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'initial_tax_code' => 'getInitialTaxCode',
        'prev_taxable_income_rcvd' => 'getPrevTaxableIncomeRcvd',
        'income_before_april_2006' => 'getIncomeBeforeApril2006',
        'prev_lta_used' => 'getPrevLtaUsed',
        'prev_tax_paid' => 'getPrevTaxPaid',
        'mpaa_triggered' => 'getMpaaTriggered',
        'serious_ill_health' => 'getSeriousIllHealth',
        'mpaa_triggered_date' => 'getMpaaTriggeredDate',
        'id' => 'getId',
        'account_id' => 'getAccountId',
        'status' => 'getStatus',
        'hmrc_protection_id' => 'getHmrcProtectionId',
        'checked_manually' => 'getCheckedManually',
        'pension_type' => 'getPensionType',
        'hmrc_protection' => 'getHmrcProtection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('initial_tax_code', $data ?? [], null);
        $this->setIfExists('prev_taxable_income_rcvd', $data ?? [], null);
        $this->setIfExists('income_before_april_2006', $data ?? [], false);
        $this->setIfExists('prev_lta_used', $data ?? [], null);
        $this->setIfExists('prev_tax_paid', $data ?? [], null);
        $this->setIfExists('mpaa_triggered', $data ?? [], false);
        $this->setIfExists('serious_ill_health', $data ?? [], false);
        $this->setIfExists('mpaa_triggered_date', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('hmrc_protection_id', $data ?? [], null);
        $this->setIfExists('checked_manually', $data ?? [], null);
        $this->setIfExists('pension_type', $data ?? [], null);
        $this->setIfExists('hmrc_protection', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['account_id'] === null) {
            $invalidProperties[] = "'account_id' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['checked_manually'] === null) {
            $invalidProperties[] = "'checked_manually' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets initial_tax_code
     *
     * @return string|null
     */
    public function getInitialTaxCode()
    {
        return $this->container['initial_tax_code'];
    }

    /**
     * Sets initial_tax_code
     *
     * @param string|null $initial_tax_code initial_tax_code
     *
     * @return self
     */
    public function setInitialTaxCode($initial_tax_code)
    {
        if (is_null($initial_tax_code)) {
            throw new \InvalidArgumentException('non-nullable initial_tax_code cannot be null');
        }
        $this->container['initial_tax_code'] = $initial_tax_code;

        return $this;
    }

    /**
     * Gets prev_taxable_income_rcvd
     *
     * @return float|null
     */
    public function getPrevTaxableIncomeRcvd()
    {
        return $this->container['prev_taxable_income_rcvd'];
    }

    /**
     * Sets prev_taxable_income_rcvd
     *
     * @param float|null $prev_taxable_income_rcvd prev_taxable_income_rcvd
     *
     * @return self
     */
    public function setPrevTaxableIncomeRcvd($prev_taxable_income_rcvd)
    {
        if (is_null($prev_taxable_income_rcvd)) {
            throw new \InvalidArgumentException('non-nullable prev_taxable_income_rcvd cannot be null');
        }
        $this->container['prev_taxable_income_rcvd'] = $prev_taxable_income_rcvd;

        return $this;
    }

    /**
     * Gets income_before_april_2006
     *
     * @return bool|null
     */
    public function getIncomeBeforeApril2006()
    {
        return $this->container['income_before_april_2006'];
    }

    /**
     * Sets income_before_april_2006
     *
     * @param bool|null $income_before_april_2006 income_before_april_2006
     *
     * @return self
     */
    public function setIncomeBeforeApril2006($income_before_april_2006)
    {
        if (is_null($income_before_april_2006)) {
            throw new \InvalidArgumentException('non-nullable income_before_april_2006 cannot be null');
        }
        $this->container['income_before_april_2006'] = $income_before_april_2006;

        return $this;
    }

    /**
     * Gets prev_lta_used
     *
     * @return float|null
     */
    public function getPrevLtaUsed()
    {
        return $this->container['prev_lta_used'];
    }

    /**
     * Sets prev_lta_used
     *
     * @param float|null $prev_lta_used prev_lta_used
     *
     * @return self
     */
    public function setPrevLtaUsed($prev_lta_used)
    {
        if (is_null($prev_lta_used)) {
            throw new \InvalidArgumentException('non-nullable prev_lta_used cannot be null');
        }
        $this->container['prev_lta_used'] = $prev_lta_used;

        return $this;
    }

    /**
     * Gets prev_tax_paid
     *
     * @return float|null
     */
    public function getPrevTaxPaid()
    {
        return $this->container['prev_tax_paid'];
    }

    /**
     * Sets prev_tax_paid
     *
     * @param float|null $prev_tax_paid prev_tax_paid
     *
     * @return self
     */
    public function setPrevTaxPaid($prev_tax_paid)
    {
        if (is_null($prev_tax_paid)) {
            throw new \InvalidArgumentException('non-nullable prev_tax_paid cannot be null');
        }
        $this->container['prev_tax_paid'] = $prev_tax_paid;

        return $this;
    }

    /**
     * Gets mpaa_triggered
     *
     * @return bool|null
     */
    public function getMpaaTriggered()
    {
        return $this->container['mpaa_triggered'];
    }

    /**
     * Sets mpaa_triggered
     *
     * @param bool|null $mpaa_triggered mpaa_triggered
     *
     * @return self
     */
    public function setMpaaTriggered($mpaa_triggered)
    {
        if (is_null($mpaa_triggered)) {
            throw new \InvalidArgumentException('non-nullable mpaa_triggered cannot be null');
        }
        $this->container['mpaa_triggered'] = $mpaa_triggered;

        return $this;
    }

    /**
     * Gets serious_ill_health
     *
     * @return bool|null
     */
    public function getSeriousIllHealth()
    {
        return $this->container['serious_ill_health'];
    }

    /**
     * Sets serious_ill_health
     *
     * @param bool|null $serious_ill_health serious_ill_health
     *
     * @return self
     */
    public function setSeriousIllHealth($serious_ill_health)
    {
        if (is_null($serious_ill_health)) {
            throw new \InvalidArgumentException('non-nullable serious_ill_health cannot be null');
        }
        $this->container['serious_ill_health'] = $serious_ill_health;

        return $this;
    }

    /**
     * Gets mpaa_triggered_date
     *
     * @return \DateTime|null
     */
    public function getMpaaTriggeredDate()
    {
        return $this->container['mpaa_triggered_date'];
    }

    /**
     * Sets mpaa_triggered_date
     *
     * @param \DateTime|null $mpaa_triggered_date mpaa_triggered_date
     *
     * @return self
     */
    public function setMpaaTriggeredDate($mpaa_triggered_date)
    {
        if (is_null($mpaa_triggered_date)) {
            throw new \InvalidArgumentException('non-nullable mpaa_triggered_date cannot be null');
        }
        $this->container['mpaa_triggered_date'] = $mpaa_triggered_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets hmrc_protection_id
     *
     * @return int|null
     */
    public function getHmrcProtectionId()
    {
        return $this->container['hmrc_protection_id'];
    }

    /**
     * Sets hmrc_protection_id
     *
     * @param int|null $hmrc_protection_id hmrc_protection_id
     *
     * @return self
     */
    public function setHmrcProtectionId($hmrc_protection_id)
    {
        if (is_null($hmrc_protection_id)) {
            throw new \InvalidArgumentException('non-nullable hmrc_protection_id cannot be null');
        }
        $this->container['hmrc_protection_id'] = $hmrc_protection_id;

        return $this;
    }

    /**
     * Gets checked_manually
     *
     * @return bool
     */
    public function getCheckedManually()
    {
        return $this->container['checked_manually'];
    }

    /**
     * Sets checked_manually
     *
     * @param bool $checked_manually checked_manually
     *
     * @return self
     */
    public function setCheckedManually($checked_manually)
    {
        if (is_null($checked_manually)) {
            throw new \InvalidArgumentException('non-nullable checked_manually cannot be null');
        }
        $this->container['checked_manually'] = $checked_manually;

        return $this;
    }

    /**
     * Gets pension_type
     *
     * @return \OpenAPI\Client\Model\PensionTypes|null
     */
    public function getPensionType()
    {
        return $this->container['pension_type'];
    }

    /**
     * Sets pension_type
     *
     * @param \OpenAPI\Client\Model\PensionTypes|null $pension_type pension_type
     *
     * @return self
     */
    public function setPensionType($pension_type)
    {
        if (is_null($pension_type)) {
            throw new \InvalidArgumentException('non-nullable pension_type cannot be null');
        }
        $this->container['pension_type'] = $pension_type;

        return $this;
    }

    /**
     * Gets hmrc_protection
     *
     * @return \OpenAPI\Client\Model\HMRCProtectionReturnSchema|null
     */
    public function getHmrcProtection()
    {
        return $this->container['hmrc_protection'];
    }

    /**
     * Sets hmrc_protection
     *
     * @param \OpenAPI\Client\Model\HMRCProtectionReturnSchema|null $hmrc_protection hmrc_protection
     *
     * @return self
     */
    public function setHmrcProtection($hmrc_protection)
    {
        if (is_null($hmrc_protection)) {
            throw new \InvalidArgumentException('non-nullable hmrc_protection cannot be null');
        }
        $this->container['hmrc_protection'] = $hmrc_protection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


