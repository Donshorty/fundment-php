<?php
/**
 * AdviserFirmOptionCreateSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AdviserFirmOptionCreateSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdviserFirmOptionCreateSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdviserFirmOptionCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'default_drop_notification' => '\OpenAPI\Client\Model\DropNotification',
        'customer_link_method' => '\OpenAPI\Client\Model\CustomerLinkMethod',
        'io_tenant_id' => 'string',
        'require_full_advice_for_drawdown' => 'bool',
        'enable_leads' => 'bool',
        'enable_execonly' => 'bool',
        'enable_flows_analysis' => 'bool',
        'cc_advisers_on_user_emails' => 'bool',
        'send_user_login_details' => 'bool',
        'user_emails_with_fundment_branding' => 'bool',
        'customer_show_securities' => 'bool',
        'allow_client_referrals' => 'bool',
        'email_on_pay_create' => 'bool',
        'email_on_pay_settle' => 'bool',
        'email_on_recurring_pay_settle' => 'bool',
        'email_on_tax_relief_settle' => 'bool',
        'email_on_goal_setup' => 'bool',
        'email_on_bankaccount_setup' => 'bool',
        'allow_client_deposit_withdrawals' => 'bool',
        'enable_entity_clients' => 'bool',
        'enable_create_pension_drawdown' => 'bool',
        'pay_cash_interest' => 'bool',
        'mfa_period_days' => '\OpenAPI\Client\Model\MFAPeriodDrop'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'default_drop_notification' => null,
        'customer_link_method' => null,
        'io_tenant_id' => null,
        'require_full_advice_for_drawdown' => null,
        'enable_leads' => null,
        'enable_execonly' => null,
        'enable_flows_analysis' => null,
        'cc_advisers_on_user_emails' => null,
        'send_user_login_details' => null,
        'user_emails_with_fundment_branding' => null,
        'customer_show_securities' => null,
        'allow_client_referrals' => null,
        'email_on_pay_create' => null,
        'email_on_pay_settle' => null,
        'email_on_recurring_pay_settle' => null,
        'email_on_tax_relief_settle' => null,
        'email_on_goal_setup' => null,
        'email_on_bankaccount_setup' => null,
        'allow_client_deposit_withdrawals' => null,
        'enable_entity_clients' => null,
        'enable_create_pension_drawdown' => null,
        'pay_cash_interest' => null,
        'mfa_period_days' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'default_drop_notification' => false,
        'customer_link_method' => false,
        'io_tenant_id' => false,
        'require_full_advice_for_drawdown' => false,
        'enable_leads' => false,
        'enable_execonly' => false,
        'enable_flows_analysis' => false,
        'cc_advisers_on_user_emails' => false,
        'send_user_login_details' => false,
        'user_emails_with_fundment_branding' => false,
        'customer_show_securities' => false,
        'allow_client_referrals' => false,
        'email_on_pay_create' => false,
        'email_on_pay_settle' => false,
        'email_on_recurring_pay_settle' => false,
        'email_on_tax_relief_settle' => false,
        'email_on_goal_setup' => false,
        'email_on_bankaccount_setup' => false,
        'allow_client_deposit_withdrawals' => false,
        'enable_entity_clients' => false,
        'enable_create_pension_drawdown' => false,
        'pay_cash_interest' => false,
        'mfa_period_days' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_drop_notification' => 'default_drop_notification',
        'customer_link_method' => 'customer_link_method',
        'io_tenant_id' => 'io_tenant_id',
        'require_full_advice_for_drawdown' => 'require_full_advice_for_drawdown',
        'enable_leads' => 'enable_leads',
        'enable_execonly' => 'enable_execonly',
        'enable_flows_analysis' => 'enable_flows_analysis',
        'cc_advisers_on_user_emails' => 'cc_advisers_on_user_emails',
        'send_user_login_details' => 'send_user_login_details',
        'user_emails_with_fundment_branding' => 'user_emails_with_fundment_branding',
        'customer_show_securities' => 'customer_show_securities',
        'allow_client_referrals' => 'allow_client_referrals',
        'email_on_pay_create' => 'email_on_pay_create',
        'email_on_pay_settle' => 'email_on_pay_settle',
        'email_on_recurring_pay_settle' => 'email_on_recurring_pay_settle',
        'email_on_tax_relief_settle' => 'email_on_tax_relief_settle',
        'email_on_goal_setup' => 'email_on_goal_setup',
        'email_on_bankaccount_setup' => 'email_on_bankaccount_setup',
        'allow_client_deposit_withdrawals' => 'allow_client_deposit_withdrawals',
        'enable_entity_clients' => 'enable_entity_clients',
        'enable_create_pension_drawdown' => 'enable_create_pension_drawdown',
        'pay_cash_interest' => 'pay_cash_interest',
        'mfa_period_days' => 'mfa_period_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_drop_notification' => 'setDefaultDropNotification',
        'customer_link_method' => 'setCustomerLinkMethod',
        'io_tenant_id' => 'setIoTenantId',
        'require_full_advice_for_drawdown' => 'setRequireFullAdviceForDrawdown',
        'enable_leads' => 'setEnableLeads',
        'enable_execonly' => 'setEnableExeconly',
        'enable_flows_analysis' => 'setEnableFlowsAnalysis',
        'cc_advisers_on_user_emails' => 'setCcAdvisersOnUserEmails',
        'send_user_login_details' => 'setSendUserLoginDetails',
        'user_emails_with_fundment_branding' => 'setUserEmailsWithFundmentBranding',
        'customer_show_securities' => 'setCustomerShowSecurities',
        'allow_client_referrals' => 'setAllowClientReferrals',
        'email_on_pay_create' => 'setEmailOnPayCreate',
        'email_on_pay_settle' => 'setEmailOnPaySettle',
        'email_on_recurring_pay_settle' => 'setEmailOnRecurringPaySettle',
        'email_on_tax_relief_settle' => 'setEmailOnTaxReliefSettle',
        'email_on_goal_setup' => 'setEmailOnGoalSetup',
        'email_on_bankaccount_setup' => 'setEmailOnBankaccountSetup',
        'allow_client_deposit_withdrawals' => 'setAllowClientDepositWithdrawals',
        'enable_entity_clients' => 'setEnableEntityClients',
        'enable_create_pension_drawdown' => 'setEnableCreatePensionDrawdown',
        'pay_cash_interest' => 'setPayCashInterest',
        'mfa_period_days' => 'setMfaPeriodDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_drop_notification' => 'getDefaultDropNotification',
        'customer_link_method' => 'getCustomerLinkMethod',
        'io_tenant_id' => 'getIoTenantId',
        'require_full_advice_for_drawdown' => 'getRequireFullAdviceForDrawdown',
        'enable_leads' => 'getEnableLeads',
        'enable_execonly' => 'getEnableExeconly',
        'enable_flows_analysis' => 'getEnableFlowsAnalysis',
        'cc_advisers_on_user_emails' => 'getCcAdvisersOnUserEmails',
        'send_user_login_details' => 'getSendUserLoginDetails',
        'user_emails_with_fundment_branding' => 'getUserEmailsWithFundmentBranding',
        'customer_show_securities' => 'getCustomerShowSecurities',
        'allow_client_referrals' => 'getAllowClientReferrals',
        'email_on_pay_create' => 'getEmailOnPayCreate',
        'email_on_pay_settle' => 'getEmailOnPaySettle',
        'email_on_recurring_pay_settle' => 'getEmailOnRecurringPaySettle',
        'email_on_tax_relief_settle' => 'getEmailOnTaxReliefSettle',
        'email_on_goal_setup' => 'getEmailOnGoalSetup',
        'email_on_bankaccount_setup' => 'getEmailOnBankaccountSetup',
        'allow_client_deposit_withdrawals' => 'getAllowClientDepositWithdrawals',
        'enable_entity_clients' => 'getEnableEntityClients',
        'enable_create_pension_drawdown' => 'getEnableCreatePensionDrawdown',
        'pay_cash_interest' => 'getPayCashInterest',
        'mfa_period_days' => 'getMfaPeriodDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('default_drop_notification', $data ?? [], null);
        $this->setIfExists('customer_link_method', $data ?? [], null);
        $this->setIfExists('io_tenant_id', $data ?? [], null);
        $this->setIfExists('require_full_advice_for_drawdown', $data ?? [], true);
        $this->setIfExists('enable_leads', $data ?? [], true);
        $this->setIfExists('enable_execonly', $data ?? [], true);
        $this->setIfExists('enable_flows_analysis', $data ?? [], true);
        $this->setIfExists('cc_advisers_on_user_emails', $data ?? [], true);
        $this->setIfExists('send_user_login_details', $data ?? [], true);
        $this->setIfExists('user_emails_with_fundment_branding', $data ?? [], true);
        $this->setIfExists('customer_show_securities', $data ?? [], true);
        $this->setIfExists('allow_client_referrals', $data ?? [], false);
        $this->setIfExists('email_on_pay_create', $data ?? [], false);
        $this->setIfExists('email_on_pay_settle', $data ?? [], true);
        $this->setIfExists('email_on_recurring_pay_settle', $data ?? [], true);
        $this->setIfExists('email_on_tax_relief_settle', $data ?? [], false);
        $this->setIfExists('email_on_goal_setup', $data ?? [], false);
        $this->setIfExists('email_on_bankaccount_setup', $data ?? [], false);
        $this->setIfExists('allow_client_deposit_withdrawals', $data ?? [], false);
        $this->setIfExists('enable_entity_clients', $data ?? [], true);
        $this->setIfExists('enable_create_pension_drawdown', $data ?? [], false);
        $this->setIfExists('pay_cash_interest', $data ?? [], true);
        $this->setIfExists('mfa_period_days', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['io_tenant_id']) && !preg_match("/^[0-9]+$/", $this->container['io_tenant_id'])) {
            $invalidProperties[] = "invalid value for 'io_tenant_id', must be conform to the pattern /^[0-9]+$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_drop_notification
     *
     * @return \OpenAPI\Client\Model\DropNotification|null
     */
    public function getDefaultDropNotification()
    {
        return $this->container['default_drop_notification'];
    }

    /**
     * Sets default_drop_notification
     *
     * @param \OpenAPI\Client\Model\DropNotification|null $default_drop_notification default_drop_notification
     *
     * @return self
     */
    public function setDefaultDropNotification($default_drop_notification)
    {
        if (is_null($default_drop_notification)) {
            throw new \InvalidArgumentException('non-nullable default_drop_notification cannot be null');
        }
        $this->container['default_drop_notification'] = $default_drop_notification;

        return $this;
    }

    /**
     * Gets customer_link_method
     *
     * @return \OpenAPI\Client\Model\CustomerLinkMethod|null
     */
    public function getCustomerLinkMethod()
    {
        return $this->container['customer_link_method'];
    }

    /**
     * Sets customer_link_method
     *
     * @param \OpenAPI\Client\Model\CustomerLinkMethod|null $customer_link_method customer_link_method
     *
     * @return self
     */
    public function setCustomerLinkMethod($customer_link_method)
    {
        if (is_null($customer_link_method)) {
            throw new \InvalidArgumentException('non-nullable customer_link_method cannot be null');
        }
        $this->container['customer_link_method'] = $customer_link_method;

        return $this;
    }

    /**
     * Gets io_tenant_id
     *
     * @return string|null
     */
    public function getIoTenantId()
    {
        return $this->container['io_tenant_id'];
    }

    /**
     * Sets io_tenant_id
     *
     * @param string|null $io_tenant_id Must be a string of numbers
     *
     * @return self
     */
    public function setIoTenantId($io_tenant_id)
    {
        if (is_null($io_tenant_id)) {
            throw new \InvalidArgumentException('non-nullable io_tenant_id cannot be null');
        }

        if ((!preg_match("/^[0-9]+$/", ObjectSerializer::toString($io_tenant_id)))) {
            throw new \InvalidArgumentException("invalid value for \$io_tenant_id when calling AdviserFirmOptionCreateSchema., must conform to the pattern /^[0-9]+$/.");
        }

        $this->container['io_tenant_id'] = $io_tenant_id;

        return $this;
    }

    /**
     * Gets require_full_advice_for_drawdown
     *
     * @return bool|null
     */
    public function getRequireFullAdviceForDrawdown()
    {
        return $this->container['require_full_advice_for_drawdown'];
    }

    /**
     * Sets require_full_advice_for_drawdown
     *
     * @param bool|null $require_full_advice_for_drawdown require_full_advice_for_drawdown
     *
     * @return self
     */
    public function setRequireFullAdviceForDrawdown($require_full_advice_for_drawdown)
    {
        if (is_null($require_full_advice_for_drawdown)) {
            throw new \InvalidArgumentException('non-nullable require_full_advice_for_drawdown cannot be null');
        }
        $this->container['require_full_advice_for_drawdown'] = $require_full_advice_for_drawdown;

        return $this;
    }

    /**
     * Gets enable_leads
     *
     * @return bool|null
     */
    public function getEnableLeads()
    {
        return $this->container['enable_leads'];
    }

    /**
     * Sets enable_leads
     *
     * @param bool|null $enable_leads enable_leads
     *
     * @return self
     */
    public function setEnableLeads($enable_leads)
    {
        if (is_null($enable_leads)) {
            throw new \InvalidArgumentException('non-nullable enable_leads cannot be null');
        }
        $this->container['enable_leads'] = $enable_leads;

        return $this;
    }

    /**
     * Gets enable_execonly
     *
     * @return bool|null
     */
    public function getEnableExeconly()
    {
        return $this->container['enable_execonly'];
    }

    /**
     * Sets enable_execonly
     *
     * @param bool|null $enable_execonly enable_execonly
     *
     * @return self
     */
    public function setEnableExeconly($enable_execonly)
    {
        if (is_null($enable_execonly)) {
            throw new \InvalidArgumentException('non-nullable enable_execonly cannot be null');
        }
        $this->container['enable_execonly'] = $enable_execonly;

        return $this;
    }

    /**
     * Gets enable_flows_analysis
     *
     * @return bool|null
     */
    public function getEnableFlowsAnalysis()
    {
        return $this->container['enable_flows_analysis'];
    }

    /**
     * Sets enable_flows_analysis
     *
     * @param bool|null $enable_flows_analysis enable_flows_analysis
     *
     * @return self
     */
    public function setEnableFlowsAnalysis($enable_flows_analysis)
    {
        if (is_null($enable_flows_analysis)) {
            throw new \InvalidArgumentException('non-nullable enable_flows_analysis cannot be null');
        }
        $this->container['enable_flows_analysis'] = $enable_flows_analysis;

        return $this;
    }

    /**
     * Gets cc_advisers_on_user_emails
     *
     * @return bool|null
     */
    public function getCcAdvisersOnUserEmails()
    {
        return $this->container['cc_advisers_on_user_emails'];
    }

    /**
     * Sets cc_advisers_on_user_emails
     *
     * @param bool|null $cc_advisers_on_user_emails cc_advisers_on_user_emails
     *
     * @return self
     */
    public function setCcAdvisersOnUserEmails($cc_advisers_on_user_emails)
    {
        if (is_null($cc_advisers_on_user_emails)) {
            throw new \InvalidArgumentException('non-nullable cc_advisers_on_user_emails cannot be null');
        }
        $this->container['cc_advisers_on_user_emails'] = $cc_advisers_on_user_emails;

        return $this;
    }

    /**
     * Gets send_user_login_details
     *
     * @return bool|null
     */
    public function getSendUserLoginDetails()
    {
        return $this->container['send_user_login_details'];
    }

    /**
     * Sets send_user_login_details
     *
     * @param bool|null $send_user_login_details send_user_login_details
     *
     * @return self
     */
    public function setSendUserLoginDetails($send_user_login_details)
    {
        if (is_null($send_user_login_details)) {
            throw new \InvalidArgumentException('non-nullable send_user_login_details cannot be null');
        }
        $this->container['send_user_login_details'] = $send_user_login_details;

        return $this;
    }

    /**
     * Gets user_emails_with_fundment_branding
     *
     * @return bool|null
     */
    public function getUserEmailsWithFundmentBranding()
    {
        return $this->container['user_emails_with_fundment_branding'];
    }

    /**
     * Sets user_emails_with_fundment_branding
     *
     * @param bool|null $user_emails_with_fundment_branding user_emails_with_fundment_branding
     *
     * @return self
     */
    public function setUserEmailsWithFundmentBranding($user_emails_with_fundment_branding)
    {
        if (is_null($user_emails_with_fundment_branding)) {
            throw new \InvalidArgumentException('non-nullable user_emails_with_fundment_branding cannot be null');
        }
        $this->container['user_emails_with_fundment_branding'] = $user_emails_with_fundment_branding;

        return $this;
    }

    /**
     * Gets customer_show_securities
     *
     * @return bool|null
     */
    public function getCustomerShowSecurities()
    {
        return $this->container['customer_show_securities'];
    }

    /**
     * Sets customer_show_securities
     *
     * @param bool|null $customer_show_securities customer_show_securities
     *
     * @return self
     */
    public function setCustomerShowSecurities($customer_show_securities)
    {
        if (is_null($customer_show_securities)) {
            throw new \InvalidArgumentException('non-nullable customer_show_securities cannot be null');
        }
        $this->container['customer_show_securities'] = $customer_show_securities;

        return $this;
    }

    /**
     * Gets allow_client_referrals
     *
     * @return bool|null
     */
    public function getAllowClientReferrals()
    {
        return $this->container['allow_client_referrals'];
    }

    /**
     * Sets allow_client_referrals
     *
     * @param bool|null $allow_client_referrals allow_client_referrals
     *
     * @return self
     */
    public function setAllowClientReferrals($allow_client_referrals)
    {
        if (is_null($allow_client_referrals)) {
            throw new \InvalidArgumentException('non-nullable allow_client_referrals cannot be null');
        }
        $this->container['allow_client_referrals'] = $allow_client_referrals;

        return $this;
    }

    /**
     * Gets email_on_pay_create
     *
     * @return bool|null
     */
    public function getEmailOnPayCreate()
    {
        return $this->container['email_on_pay_create'];
    }

    /**
     * Sets email_on_pay_create
     *
     * @param bool|null $email_on_pay_create email_on_pay_create
     *
     * @return self
     */
    public function setEmailOnPayCreate($email_on_pay_create)
    {
        if (is_null($email_on_pay_create)) {
            throw new \InvalidArgumentException('non-nullable email_on_pay_create cannot be null');
        }
        $this->container['email_on_pay_create'] = $email_on_pay_create;

        return $this;
    }

    /**
     * Gets email_on_pay_settle
     *
     * @return bool|null
     */
    public function getEmailOnPaySettle()
    {
        return $this->container['email_on_pay_settle'];
    }

    /**
     * Sets email_on_pay_settle
     *
     * @param bool|null $email_on_pay_settle email_on_pay_settle
     *
     * @return self
     */
    public function setEmailOnPaySettle($email_on_pay_settle)
    {
        if (is_null($email_on_pay_settle)) {
            throw new \InvalidArgumentException('non-nullable email_on_pay_settle cannot be null');
        }
        $this->container['email_on_pay_settle'] = $email_on_pay_settle;

        return $this;
    }

    /**
     * Gets email_on_recurring_pay_settle
     *
     * @return bool|null
     */
    public function getEmailOnRecurringPaySettle()
    {
        return $this->container['email_on_recurring_pay_settle'];
    }

    /**
     * Sets email_on_recurring_pay_settle
     *
     * @param bool|null $email_on_recurring_pay_settle email_on_recurring_pay_settle
     *
     * @return self
     */
    public function setEmailOnRecurringPaySettle($email_on_recurring_pay_settle)
    {
        if (is_null($email_on_recurring_pay_settle)) {
            throw new \InvalidArgumentException('non-nullable email_on_recurring_pay_settle cannot be null');
        }
        $this->container['email_on_recurring_pay_settle'] = $email_on_recurring_pay_settle;

        return $this;
    }

    /**
     * Gets email_on_tax_relief_settle
     *
     * @return bool|null
     */
    public function getEmailOnTaxReliefSettle()
    {
        return $this->container['email_on_tax_relief_settle'];
    }

    /**
     * Sets email_on_tax_relief_settle
     *
     * @param bool|null $email_on_tax_relief_settle email_on_tax_relief_settle
     *
     * @return self
     */
    public function setEmailOnTaxReliefSettle($email_on_tax_relief_settle)
    {
        if (is_null($email_on_tax_relief_settle)) {
            throw new \InvalidArgumentException('non-nullable email_on_tax_relief_settle cannot be null');
        }
        $this->container['email_on_tax_relief_settle'] = $email_on_tax_relief_settle;

        return $this;
    }

    /**
     * Gets email_on_goal_setup
     *
     * @return bool|null
     */
    public function getEmailOnGoalSetup()
    {
        return $this->container['email_on_goal_setup'];
    }

    /**
     * Sets email_on_goal_setup
     *
     * @param bool|null $email_on_goal_setup email_on_goal_setup
     *
     * @return self
     */
    public function setEmailOnGoalSetup($email_on_goal_setup)
    {
        if (is_null($email_on_goal_setup)) {
            throw new \InvalidArgumentException('non-nullable email_on_goal_setup cannot be null');
        }
        $this->container['email_on_goal_setup'] = $email_on_goal_setup;

        return $this;
    }

    /**
     * Gets email_on_bankaccount_setup
     *
     * @return bool|null
     */
    public function getEmailOnBankaccountSetup()
    {
        return $this->container['email_on_bankaccount_setup'];
    }

    /**
     * Sets email_on_bankaccount_setup
     *
     * @param bool|null $email_on_bankaccount_setup email_on_bankaccount_setup
     *
     * @return self
     */
    public function setEmailOnBankaccountSetup($email_on_bankaccount_setup)
    {
        if (is_null($email_on_bankaccount_setup)) {
            throw new \InvalidArgumentException('non-nullable email_on_bankaccount_setup cannot be null');
        }
        $this->container['email_on_bankaccount_setup'] = $email_on_bankaccount_setup;

        return $this;
    }

    /**
     * Gets allow_client_deposit_withdrawals
     *
     * @return bool|null
     */
    public function getAllowClientDepositWithdrawals()
    {
        return $this->container['allow_client_deposit_withdrawals'];
    }

    /**
     * Sets allow_client_deposit_withdrawals
     *
     * @param bool|null $allow_client_deposit_withdrawals allow_client_deposit_withdrawals
     *
     * @return self
     */
    public function setAllowClientDepositWithdrawals($allow_client_deposit_withdrawals)
    {
        if (is_null($allow_client_deposit_withdrawals)) {
            throw new \InvalidArgumentException('non-nullable allow_client_deposit_withdrawals cannot be null');
        }
        $this->container['allow_client_deposit_withdrawals'] = $allow_client_deposit_withdrawals;

        return $this;
    }

    /**
     * Gets enable_entity_clients
     *
     * @return bool|null
     */
    public function getEnableEntityClients()
    {
        return $this->container['enable_entity_clients'];
    }

    /**
     * Sets enable_entity_clients
     *
     * @param bool|null $enable_entity_clients enable_entity_clients
     *
     * @return self
     */
    public function setEnableEntityClients($enable_entity_clients)
    {
        if (is_null($enable_entity_clients)) {
            throw new \InvalidArgumentException('non-nullable enable_entity_clients cannot be null');
        }
        $this->container['enable_entity_clients'] = $enable_entity_clients;

        return $this;
    }

    /**
     * Gets enable_create_pension_drawdown
     *
     * @return bool|null
     */
    public function getEnableCreatePensionDrawdown()
    {
        return $this->container['enable_create_pension_drawdown'];
    }

    /**
     * Sets enable_create_pension_drawdown
     *
     * @param bool|null $enable_create_pension_drawdown enable_create_pension_drawdown
     *
     * @return self
     */
    public function setEnableCreatePensionDrawdown($enable_create_pension_drawdown)
    {
        if (is_null($enable_create_pension_drawdown)) {
            throw new \InvalidArgumentException('non-nullable enable_create_pension_drawdown cannot be null');
        }
        $this->container['enable_create_pension_drawdown'] = $enable_create_pension_drawdown;

        return $this;
    }

    /**
     * Gets pay_cash_interest
     *
     * @return bool|null
     */
    public function getPayCashInterest()
    {
        return $this->container['pay_cash_interest'];
    }

    /**
     * Sets pay_cash_interest
     *
     * @param bool|null $pay_cash_interest pay_cash_interest
     *
     * @return self
     */
    public function setPayCashInterest($pay_cash_interest)
    {
        if (is_null($pay_cash_interest)) {
            throw new \InvalidArgumentException('non-nullable pay_cash_interest cannot be null');
        }
        $this->container['pay_cash_interest'] = $pay_cash_interest;

        return $this;
    }

    /**
     * Gets mfa_period_days
     *
     * @return \OpenAPI\Client\Model\MFAPeriodDrop|null
     */
    public function getMfaPeriodDays()
    {
        return $this->container['mfa_period_days'];
    }

    /**
     * Sets mfa_period_days
     *
     * @param \OpenAPI\Client\Model\MFAPeriodDrop|null $mfa_period_days mfa_period_days
     *
     * @return self
     */
    public function setMfaPeriodDays($mfa_period_days)
    {
        if (is_null($mfa_period_days)) {
            throw new \InvalidArgumentException('non-nullable mfa_period_days cannot be null');
        }
        $this->container['mfa_period_days'] = $mfa_period_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


