<?php
/**
 * InvestmentStrategyReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvestmentStrategyReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvestmentStrategyReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvestmentStrategyReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'desc' => 'string',
        'weighting_type' => '\OpenAPI\Client\Model\WeightingType',
        'is_tradeable' => 'bool',
        'auto_rebalance' => 'bool',
        'cash_exec_algo' => '\OpenAPI\Client\Model\CashExecAlgo',
        'sort_order' => 'int',
        'objectives' => 'string',
        'ref' => 'int',
        'cagr' => 'float',
        'vol' => 'float',
        'icf' => 'float',
        'ocf' => 'float',
        'status' => '\OpenAPI\Client\Model\FapiDbInvstrategyInvStrategyStatus',
        'group_ref' => 'int',
        'date_updated' => '\DateTime',
        'audit_latest' => '\OpenAPI\Client\Model\InvStrategyAuditReturnSchema',
        'benchmarks' => '\OpenAPI\Client\Model\InvStrategyBenchmarksReturnSchema[]',
        'weights_latest' => '\OpenAPI\Client\Model\InvStrategyWeightingLatestReturnSchema[]',
        'investment_management_firm_ref' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'desc' => null,
        'weighting_type' => null,
        'is_tradeable' => null,
        'auto_rebalance' => null,
        'cash_exec_algo' => null,
        'sort_order' => null,
        'objectives' => null,
        'ref' => null,
        'cagr' => null,
        'vol' => null,
        'icf' => null,
        'ocf' => null,
        'status' => null,
        'group_ref' => null,
        'date_updated' => 'date-time',
        'audit_latest' => null,
        'benchmarks' => null,
        'weights_latest' => null,
        'investment_management_firm_ref' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'desc' => false,
        'weighting_type' => false,
        'is_tradeable' => false,
        'auto_rebalance' => false,
        'cash_exec_algo' => false,
        'sort_order' => false,
        'objectives' => false,
        'ref' => false,
        'cagr' => false,
        'vol' => false,
        'icf' => false,
        'ocf' => false,
        'status' => false,
        'group_ref' => false,
        'date_updated' => false,
        'audit_latest' => false,
        'benchmarks' => false,
        'weights_latest' => false,
        'investment_management_firm_ref' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'desc' => 'desc',
        'weighting_type' => 'weighting_type',
        'is_tradeable' => 'is_tradeable',
        'auto_rebalance' => 'auto_rebalance',
        'cash_exec_algo' => 'cash_exec_algo',
        'sort_order' => 'sort_order',
        'objectives' => 'objectives',
        'ref' => 'ref',
        'cagr' => 'cagr',
        'vol' => 'vol',
        'icf' => 'icf',
        'ocf' => 'ocf',
        'status' => 'status',
        'group_ref' => 'group_ref',
        'date_updated' => 'date_updated',
        'audit_latest' => 'audit_latest',
        'benchmarks' => 'benchmarks',
        'weights_latest' => 'weights_latest',
        'investment_management_firm_ref' => 'investment_management_firm_ref'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'desc' => 'setDesc',
        'weighting_type' => 'setWeightingType',
        'is_tradeable' => 'setIsTradeable',
        'auto_rebalance' => 'setAutoRebalance',
        'cash_exec_algo' => 'setCashExecAlgo',
        'sort_order' => 'setSortOrder',
        'objectives' => 'setObjectives',
        'ref' => 'setRef',
        'cagr' => 'setCagr',
        'vol' => 'setVol',
        'icf' => 'setIcf',
        'ocf' => 'setOcf',
        'status' => 'setStatus',
        'group_ref' => 'setGroupRef',
        'date_updated' => 'setDateUpdated',
        'audit_latest' => 'setAuditLatest',
        'benchmarks' => 'setBenchmarks',
        'weights_latest' => 'setWeightsLatest',
        'investment_management_firm_ref' => 'setInvestmentManagementFirmRef'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'desc' => 'getDesc',
        'weighting_type' => 'getWeightingType',
        'is_tradeable' => 'getIsTradeable',
        'auto_rebalance' => 'getAutoRebalance',
        'cash_exec_algo' => 'getCashExecAlgo',
        'sort_order' => 'getSortOrder',
        'objectives' => 'getObjectives',
        'ref' => 'getRef',
        'cagr' => 'getCagr',
        'vol' => 'getVol',
        'icf' => 'getIcf',
        'ocf' => 'getOcf',
        'status' => 'getStatus',
        'group_ref' => 'getGroupRef',
        'date_updated' => 'getDateUpdated',
        'audit_latest' => 'getAuditLatest',
        'benchmarks' => 'getBenchmarks',
        'weights_latest' => 'getWeightsLatest',
        'investment_management_firm_ref' => 'getInvestmentManagementFirmRef'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('desc', $data ?? [], null);
        $this->setIfExists('weighting_type', $data ?? [], null);
        $this->setIfExists('is_tradeable', $data ?? [], true);
        $this->setIfExists('auto_rebalance', $data ?? [], true);
        $this->setIfExists('cash_exec_algo', $data ?? [], null);
        $this->setIfExists('sort_order', $data ?? [], 0);
        $this->setIfExists('objectives', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('cagr', $data ?? [], null);
        $this->setIfExists('vol', $data ?? [], null);
        $this->setIfExists('icf', $data ?? [], null);
        $this->setIfExists('ocf', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('group_ref', $data ?? [], null);
        $this->setIfExists('date_updated', $data ?? [], null);
        $this->setIfExists('audit_latest', $data ?? [], null);
        $this->setIfExists('benchmarks', $data ?? [], null);
        $this->setIfExists('weights_latest', $data ?? [], null);
        $this->setIfExists('investment_management_firm_ref', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['desc'] === null) {
            $invalidProperties[] = "'desc' can't be null";
        }
        if ($this->container['cash_exec_algo'] === null) {
            $invalidProperties[] = "'cash_exec_algo' can't be null";
        }
        if ($this->container['ref'] === null) {
            $invalidProperties[] = "'ref' can't be null";
        }
        if ($this->container['date_updated'] === null) {
            $invalidProperties[] = "'date_updated' can't be null";
        }
        if ($this->container['investment_management_firm_ref'] === null) {
            $invalidProperties[] = "'investment_management_firm_ref' can't be null";
        }
        if ((mb_strlen($this->container['investment_management_firm_ref']) > 6)) {
            $invalidProperties[] = "invalid value for 'investment_management_firm_ref', the character length must be smaller than or equal to 6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets desc
     *
     * @return string
     */
    public function getDesc()
    {
        return $this->container['desc'];
    }

    /**
     * Sets desc
     *
     * @param string $desc desc
     *
     * @return self
     */
    public function setDesc($desc)
    {
        if (is_null($desc)) {
            throw new \InvalidArgumentException('non-nullable desc cannot be null');
        }
        $this->container['desc'] = $desc;

        return $this;
    }

    /**
     * Gets weighting_type
     *
     * @return \OpenAPI\Client\Model\WeightingType|null
     */
    public function getWeightingType()
    {
        return $this->container['weighting_type'];
    }

    /**
     * Sets weighting_type
     *
     * @param \OpenAPI\Client\Model\WeightingType|null $weighting_type weighting_type
     *
     * @return self
     */
    public function setWeightingType($weighting_type)
    {
        if (is_null($weighting_type)) {
            throw new \InvalidArgumentException('non-nullable weighting_type cannot be null');
        }
        $this->container['weighting_type'] = $weighting_type;

        return $this;
    }

    /**
     * Gets is_tradeable
     *
     * @return bool|null
     */
    public function getIsTradeable()
    {
        return $this->container['is_tradeable'];
    }

    /**
     * Sets is_tradeable
     *
     * @param bool|null $is_tradeable is_tradeable
     *
     * @return self
     */
    public function setIsTradeable($is_tradeable)
    {
        if (is_null($is_tradeable)) {
            throw new \InvalidArgumentException('non-nullable is_tradeable cannot be null');
        }
        $this->container['is_tradeable'] = $is_tradeable;

        return $this;
    }

    /**
     * Gets auto_rebalance
     *
     * @return bool|null
     */
    public function getAutoRebalance()
    {
        return $this->container['auto_rebalance'];
    }

    /**
     * Sets auto_rebalance
     *
     * @param bool|null $auto_rebalance auto_rebalance
     *
     * @return self
     */
    public function setAutoRebalance($auto_rebalance)
    {
        if (is_null($auto_rebalance)) {
            throw new \InvalidArgumentException('non-nullable auto_rebalance cannot be null');
        }
        $this->container['auto_rebalance'] = $auto_rebalance;

        return $this;
    }

    /**
     * Gets cash_exec_algo
     *
     * @return \OpenAPI\Client\Model\CashExecAlgo
     */
    public function getCashExecAlgo()
    {
        return $this->container['cash_exec_algo'];
    }

    /**
     * Sets cash_exec_algo
     *
     * @param \OpenAPI\Client\Model\CashExecAlgo $cash_exec_algo cash_exec_algo
     *
     * @return self
     */
    public function setCashExecAlgo($cash_exec_algo)
    {
        if (is_null($cash_exec_algo)) {
            throw new \InvalidArgumentException('non-nullable cash_exec_algo cannot be null');
        }
        $this->container['cash_exec_algo'] = $cash_exec_algo;

        return $this;
    }

    /**
     * Gets sort_order
     *
     * @return int|null
     */
    public function getSortOrder()
    {
        return $this->container['sort_order'];
    }

    /**
     * Sets sort_order
     *
     * @param int|null $sort_order sort_order
     *
     * @return self
     */
    public function setSortOrder($sort_order)
    {
        if (is_null($sort_order)) {
            throw new \InvalidArgumentException('non-nullable sort_order cannot be null');
        }
        $this->container['sort_order'] = $sort_order;

        return $this;
    }

    /**
     * Gets objectives
     *
     * @return string|null
     */
    public function getObjectives()
    {
        return $this->container['objectives'];
    }

    /**
     * Sets objectives
     *
     * @param string|null $objectives objectives
     *
     * @return self
     */
    public function setObjectives($objectives)
    {
        if (is_null($objectives)) {
            throw new \InvalidArgumentException('non-nullable objectives cannot be null');
        }
        $this->container['objectives'] = $objectives;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return int
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param int $ref ref
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets cagr
     *
     * @return float|null
     */
    public function getCagr()
    {
        return $this->container['cagr'];
    }

    /**
     * Sets cagr
     *
     * @param float|null $cagr cagr
     *
     * @return self
     */
    public function setCagr($cagr)
    {
        if (is_null($cagr)) {
            throw new \InvalidArgumentException('non-nullable cagr cannot be null');
        }
        $this->container['cagr'] = $cagr;

        return $this;
    }

    /**
     * Gets vol
     *
     * @return float|null
     */
    public function getVol()
    {
        return $this->container['vol'];
    }

    /**
     * Sets vol
     *
     * @param float|null $vol vol
     *
     * @return self
     */
    public function setVol($vol)
    {
        if (is_null($vol)) {
            throw new \InvalidArgumentException('non-nullable vol cannot be null');
        }
        $this->container['vol'] = $vol;

        return $this;
    }

    /**
     * Gets icf
     *
     * @return float|null
     */
    public function getIcf()
    {
        return $this->container['icf'];
    }

    /**
     * Sets icf
     *
     * @param float|null $icf icf
     *
     * @return self
     */
    public function setIcf($icf)
    {
        if (is_null($icf)) {
            throw new \InvalidArgumentException('non-nullable icf cannot be null');
        }
        $this->container['icf'] = $icf;

        return $this;
    }

    /**
     * Gets ocf
     *
     * @return float|null
     */
    public function getOcf()
    {
        return $this->container['ocf'];
    }

    /**
     * Sets ocf
     *
     * @param float|null $ocf ocf
     *
     * @return self
     */
    public function setOcf($ocf)
    {
        if (is_null($ocf)) {
            throw new \InvalidArgumentException('non-nullable ocf cannot be null');
        }
        $this->container['ocf'] = $ocf;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\FapiDbInvstrategyInvStrategyStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\FapiDbInvstrategyInvStrategyStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets group_ref
     *
     * @return int|null
     */
    public function getGroupRef()
    {
        return $this->container['group_ref'];
    }

    /**
     * Sets group_ref
     *
     * @param int|null $group_ref group_ref
     *
     * @return self
     */
    public function setGroupRef($group_ref)
    {
        if (is_null($group_ref)) {
            throw new \InvalidArgumentException('non-nullable group_ref cannot be null');
        }
        $this->container['group_ref'] = $group_ref;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime $date_updated date_updated
     *
     * @return self
     */
    public function setDateUpdated($date_updated)
    {
        if (is_null($date_updated)) {
            throw new \InvalidArgumentException('non-nullable date_updated cannot be null');
        }
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets audit_latest
     *
     * @return \OpenAPI\Client\Model\InvStrategyAuditReturnSchema|null
     */
    public function getAuditLatest()
    {
        return $this->container['audit_latest'];
    }

    /**
     * Sets audit_latest
     *
     * @param \OpenAPI\Client\Model\InvStrategyAuditReturnSchema|null $audit_latest audit_latest
     *
     * @return self
     */
    public function setAuditLatest($audit_latest)
    {
        if (is_null($audit_latest)) {
            throw new \InvalidArgumentException('non-nullable audit_latest cannot be null');
        }
        $this->container['audit_latest'] = $audit_latest;

        return $this;
    }

    /**
     * Gets benchmarks
     *
     * @return \OpenAPI\Client\Model\InvStrategyBenchmarksReturnSchema[]|null
     */
    public function getBenchmarks()
    {
        return $this->container['benchmarks'];
    }

    /**
     * Sets benchmarks
     *
     * @param \OpenAPI\Client\Model\InvStrategyBenchmarksReturnSchema[]|null $benchmarks benchmarks
     *
     * @return self
     */
    public function setBenchmarks($benchmarks)
    {
        if (is_null($benchmarks)) {
            throw new \InvalidArgumentException('non-nullable benchmarks cannot be null');
        }
        $this->container['benchmarks'] = $benchmarks;

        return $this;
    }

    /**
     * Gets weights_latest
     *
     * @return \OpenAPI\Client\Model\InvStrategyWeightingLatestReturnSchema[]|null
     */
    public function getWeightsLatest()
    {
        return $this->container['weights_latest'];
    }

    /**
     * Sets weights_latest
     *
     * @param \OpenAPI\Client\Model\InvStrategyWeightingLatestReturnSchema[]|null $weights_latest weights_latest
     *
     * @return self
     */
    public function setWeightsLatest($weights_latest)
    {
        if (is_null($weights_latest)) {
            throw new \InvalidArgumentException('non-nullable weights_latest cannot be null');
        }
        $this->container['weights_latest'] = $weights_latest;

        return $this;
    }

    /**
     * Gets investment_management_firm_ref
     *
     * @return string
     */
    public function getInvestmentManagementFirmRef()
    {
        return $this->container['investment_management_firm_ref'];
    }

    /**
     * Sets investment_management_firm_ref
     *
     * @param string $investment_management_firm_ref investment_management_firm_ref
     *
     * @return self
     */
    public function setInvestmentManagementFirmRef($investment_management_firm_ref)
    {
        if (is_null($investment_management_firm_ref)) {
            throw new \InvalidArgumentException('non-nullable investment_management_firm_ref cannot be null');
        }
        if ((mb_strlen($investment_management_firm_ref) > 6)) {
            throw new \InvalidArgumentException('invalid length for $investment_management_firm_ref when calling InvestmentStrategyReturnSchema., must be smaller than or equal to 6.');
        }

        $this->container['investment_management_firm_ref'] = $investment_management_firm_ref;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


