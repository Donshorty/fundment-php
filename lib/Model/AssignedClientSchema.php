<?php
/**
 * AssignedClientSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AssignedClientSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AssignedClientSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AssignedClientSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_id' => 'int',
        'client_name' => 'string',
        'goal_id' => 'int',
        'goal_name' => 'string',
        'goal_status' => 'string',
        'is_custom_portfolio' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'client_id' => null,
        'client_name' => null,
        'goal_id' => null,
        'goal_name' => null,
        'goal_status' => null,
        'is_custom_portfolio' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'client_id' => false,
        'client_name' => false,
        'goal_id' => false,
        'goal_name' => false,
        'goal_status' => false,
        'is_custom_portfolio' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
        'client_name' => 'client_name',
        'goal_id' => 'goal_id',
        'goal_name' => 'goal_name',
        'goal_status' => 'goal_status',
        'is_custom_portfolio' => 'is_custom_portfolio'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'client_name' => 'setClientName',
        'goal_id' => 'setGoalId',
        'goal_name' => 'setGoalName',
        'goal_status' => 'setGoalStatus',
        'is_custom_portfolio' => 'setIsCustomPortfolio'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'client_name' => 'getClientName',
        'goal_id' => 'getGoalId',
        'goal_name' => 'getGoalName',
        'goal_status' => 'getGoalStatus',
        'is_custom_portfolio' => 'getIsCustomPortfolio'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('client_id', $data ?? [], null);
        $this->setIfExists('client_name', $data ?? [], null);
        $this->setIfExists('goal_id', $data ?? [], null);
        $this->setIfExists('goal_name', $data ?? [], null);
        $this->setIfExists('goal_status', $data ?? [], null);
        $this->setIfExists('is_custom_portfolio', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['client_name'] === null) {
            $invalidProperties[] = "'client_name' can't be null";
        }
        if ($this->container['goal_id'] === null) {
            $invalidProperties[] = "'goal_id' can't be null";
        }
        if ($this->container['goal_name'] === null) {
            $invalidProperties[] = "'goal_name' can't be null";
        }
        if ($this->container['goal_status'] === null) {
            $invalidProperties[] = "'goal_status' can't be null";
        }
        if ($this->container['is_custom_portfolio'] === null) {
            $invalidProperties[] = "'is_custom_portfolio' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return self
     */
    public function setClientId($client_id)
    {
        if (is_null($client_id)) {
            throw new \InvalidArgumentException('non-nullable client_id cannot be null');
        }
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string $client_name client_name
     *
     * @return self
     */
    public function setClientName($client_name)
    {
        if (is_null($client_name)) {
            throw new \InvalidArgumentException('non-nullable client_name cannot be null');
        }
        $this->container['client_name'] = $client_name;

        return $this;
    }

    /**
     * Gets goal_id
     *
     * @return int
     */
    public function getGoalId()
    {
        return $this->container['goal_id'];
    }

    /**
     * Sets goal_id
     *
     * @param int $goal_id goal_id
     *
     * @return self
     */
    public function setGoalId($goal_id)
    {
        if (is_null($goal_id)) {
            throw new \InvalidArgumentException('non-nullable goal_id cannot be null');
        }
        $this->container['goal_id'] = $goal_id;

        return $this;
    }

    /**
     * Gets goal_name
     *
     * @return string
     */
    public function getGoalName()
    {
        return $this->container['goal_name'];
    }

    /**
     * Sets goal_name
     *
     * @param string $goal_name goal_name
     *
     * @return self
     */
    public function setGoalName($goal_name)
    {
        if (is_null($goal_name)) {
            throw new \InvalidArgumentException('non-nullable goal_name cannot be null');
        }
        $this->container['goal_name'] = $goal_name;

        return $this;
    }

    /**
     * Gets goal_status
     *
     * @return string
     */
    public function getGoalStatus()
    {
        return $this->container['goal_status'];
    }

    /**
     * Sets goal_status
     *
     * @param string $goal_status goal_status
     *
     * @return self
     */
    public function setGoalStatus($goal_status)
    {
        if (is_null($goal_status)) {
            throw new \InvalidArgumentException('non-nullable goal_status cannot be null');
        }
        $this->container['goal_status'] = $goal_status;

        return $this;
    }

    /**
     * Gets is_custom_portfolio
     *
     * @return bool
     */
    public function getIsCustomPortfolio()
    {
        return $this->container['is_custom_portfolio'];
    }

    /**
     * Sets is_custom_portfolio
     *
     * @param bool $is_custom_portfolio is_custom_portfolio
     *
     * @return self
     */
    public function setIsCustomPortfolio($is_custom_portfolio)
    {
        if (is_null($is_custom_portfolio)) {
            throw new \InvalidArgumentException('non-nullable is_custom_portfolio cannot be null');
        }
        $this->container['is_custom_portfolio'] = $is_custom_portfolio;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


