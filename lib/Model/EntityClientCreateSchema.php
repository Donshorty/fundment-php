<?php
/**
 * EntityClientCreateSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EntityClientCreateSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EntityClientCreateSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EntityClientCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entity_name' => 'string',
        'client_type' => '\OpenAPI\Client\Model\ClientType',
        'country_of_tax_residency' => 'string',
        'email' => 'string',
        'lei' => 'string',
        'adviser_firm_ref' => 'string',
        'associated_existing_users' => '\OpenAPI\Client\Model\AssociatedUserLinkSchema[]',
        'addresses' => '\OpenAPI\Client\Model\NestedClientAddressCreateSchema[]',
        'phone_number' => 'string',
        'date_of_incorporation' => '\DateTime',
        'company_reg_number' => 'string',
        'company_business_nature' => 'string',
        'country_of_incorporation' => 'string',
        'pension_scheme_tax_reference' => 'string',
        'is_associate' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entity_name' => null,
        'client_type' => null,
        'country_of_tax_residency' => null,
        'email' => 'email',
        'lei' => null,
        'adviser_firm_ref' => null,
        'associated_existing_users' => null,
        'addresses' => null,
        'phone_number' => null,
        'date_of_incorporation' => 'date',
        'company_reg_number' => null,
        'company_business_nature' => null,
        'country_of_incorporation' => null,
        'pension_scheme_tax_reference' => null,
        'is_associate' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entity_name' => false,
        'client_type' => false,
        'country_of_tax_residency' => false,
        'email' => false,
        'lei' => false,
        'adviser_firm_ref' => false,
        'associated_existing_users' => false,
        'addresses' => false,
        'phone_number' => false,
        'date_of_incorporation' => false,
        'company_reg_number' => false,
        'company_business_nature' => false,
        'country_of_incorporation' => false,
        'pension_scheme_tax_reference' => false,
        'is_associate' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entity_name' => 'entity_name',
        'client_type' => 'client_type',
        'country_of_tax_residency' => 'country_of_tax_residency',
        'email' => 'email',
        'lei' => 'lei',
        'adviser_firm_ref' => 'adviser_firm_ref',
        'associated_existing_users' => 'associated_existing_users',
        'addresses' => 'addresses',
        'phone_number' => 'phone_number',
        'date_of_incorporation' => 'date_of_incorporation',
        'company_reg_number' => 'company_reg_number',
        'company_business_nature' => 'company_business_nature',
        'country_of_incorporation' => 'country_of_incorporation',
        'pension_scheme_tax_reference' => 'pension_scheme_tax_reference',
        'is_associate' => 'is_associate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entity_name' => 'setEntityName',
        'client_type' => 'setClientType',
        'country_of_tax_residency' => 'setCountryOfTaxResidency',
        'email' => 'setEmail',
        'lei' => 'setLei',
        'adviser_firm_ref' => 'setAdviserFirmRef',
        'associated_existing_users' => 'setAssociatedExistingUsers',
        'addresses' => 'setAddresses',
        'phone_number' => 'setPhoneNumber',
        'date_of_incorporation' => 'setDateOfIncorporation',
        'company_reg_number' => 'setCompanyRegNumber',
        'company_business_nature' => 'setCompanyBusinessNature',
        'country_of_incorporation' => 'setCountryOfIncorporation',
        'pension_scheme_tax_reference' => 'setPensionSchemeTaxReference',
        'is_associate' => 'setIsAssociate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entity_name' => 'getEntityName',
        'client_type' => 'getClientType',
        'country_of_tax_residency' => 'getCountryOfTaxResidency',
        'email' => 'getEmail',
        'lei' => 'getLei',
        'adviser_firm_ref' => 'getAdviserFirmRef',
        'associated_existing_users' => 'getAssociatedExistingUsers',
        'addresses' => 'getAddresses',
        'phone_number' => 'getPhoneNumber',
        'date_of_incorporation' => 'getDateOfIncorporation',
        'company_reg_number' => 'getCompanyRegNumber',
        'company_business_nature' => 'getCompanyBusinessNature',
        'country_of_incorporation' => 'getCountryOfIncorporation',
        'pension_scheme_tax_reference' => 'getPensionSchemeTaxReference',
        'is_associate' => 'getIsAssociate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entity_name', $data ?? [], null);
        $this->setIfExists('client_type', $data ?? [], null);
        $this->setIfExists('country_of_tax_residency', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('lei', $data ?? [], null);
        $this->setIfExists('adviser_firm_ref', $data ?? [], null);
        $this->setIfExists('associated_existing_users', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('date_of_incorporation', $data ?? [], null);
        $this->setIfExists('company_reg_number', $data ?? [], null);
        $this->setIfExists('company_business_nature', $data ?? [], null);
        $this->setIfExists('country_of_incorporation', $data ?? [], null);
        $this->setIfExists('pension_scheme_tax_reference', $data ?? [], null);
        $this->setIfExists('is_associate', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_type'] === null) {
            $invalidProperties[] = "'client_type' can't be null";
        }
        if ($this->container['country_of_tax_residency'] === null) {
            $invalidProperties[] = "'country_of_tax_residency' can't be null";
        }
        if (!preg_match("/^[A-Z]{2}$/", $this->container['country_of_tax_residency'])) {
            $invalidProperties[] = "invalid value for 'country_of_tax_residency', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if (!is_null($this->container['lei']) && !preg_match("/^[A-Z,0-9]{18}[0-9]{2}/", $this->container['lei'])) {
            $invalidProperties[] = "invalid value for 'lei', must be conform to the pattern /^[A-Z,0-9]{18}[0-9]{2}/.";
        }

        if ($this->container['adviser_firm_ref'] === null) {
            $invalidProperties[] = "'adviser_firm_ref' can't be null";
        }
        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        if (!is_null($this->container['phone_number']) && !preg_match("/^\\s*(?:\\+?(\\d{1,6}))?[-.\\s(]*(\\d{1,6})[-.\\s)]*(\\d{1,6})([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?(?: *(\\d+))?\\s*$/", $this->container['phone_number'])) {
            $invalidProperties[] = "invalid value for 'phone_number', must be conform to the pattern /^\\s*(?:\\+?(\\d{1,6}))?[-.\\s(]*(\\d{1,6})[-.\\s)]*(\\d{1,6})([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?(?: *(\\d+))?\\s*$/.";
        }

        if ($this->container['date_of_incorporation'] === null) {
            $invalidProperties[] = "'date_of_incorporation' can't be null";
        }
        if (!is_null($this->container['country_of_incorporation']) && !preg_match("/^[A-Z]{2}$/", $this->container['country_of_incorporation'])) {
            $invalidProperties[] = "invalid value for 'country_of_incorporation', must be conform to the pattern /^[A-Z]{2}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entity_name
     *
     * @return string|null
     */
    public function getEntityName()
    {
        return $this->container['entity_name'];
    }

    /**
     * Sets entity_name
     *
     * @param string|null $entity_name entity_name
     *
     * @return self
     */
    public function setEntityName($entity_name)
    {
        if (is_null($entity_name)) {
            throw new \InvalidArgumentException('non-nullable entity_name cannot be null');
        }
        $this->container['entity_name'] = $entity_name;

        return $this;
    }

    /**
     * Gets client_type
     *
     * @return \OpenAPI\Client\Model\ClientType
     */
    public function getClientType()
    {
        return $this->container['client_type'];
    }

    /**
     * Sets client_type
     *
     * @param \OpenAPI\Client\Model\ClientType $client_type client_type
     *
     * @return self
     */
    public function setClientType($client_type)
    {
        if (is_null($client_type)) {
            throw new \InvalidArgumentException('non-nullable client_type cannot be null');
        }
        $this->container['client_type'] = $client_type;

        return $this;
    }

    /**
     * Gets country_of_tax_residency
     *
     * @return string
     */
    public function getCountryOfTaxResidency()
    {
        return $this->container['country_of_tax_residency'];
    }

    /**
     * Sets country_of_tax_residency
     *
     * @param string $country_of_tax_residency Must be a string of letters of length 2, based on the ISO alpha-2 codes
     *
     * @return self
     */
    public function setCountryOfTaxResidency($country_of_tax_residency)
    {
        if (is_null($country_of_tax_residency)) {
            throw new \InvalidArgumentException('non-nullable country_of_tax_residency cannot be null');
        }

        if ((!preg_match("/^[A-Z]{2}$/", ObjectSerializer::toString($country_of_tax_residency)))) {
            throw new \InvalidArgumentException("invalid value for \$country_of_tax_residency when calling EntityClientCreateSchema., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['country_of_tax_residency'] = $country_of_tax_residency;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets lei
     *
     * @return string|null
     */
    public function getLei()
    {
        return $this->container['lei'];
    }

    /**
     * Sets lei
     *
     * @param string|null $lei 20-character long Legal Entity Idenitfier
     *
     * @return self
     */
    public function setLei($lei)
    {
        if (is_null($lei)) {
            throw new \InvalidArgumentException('non-nullable lei cannot be null');
        }

        if ((!preg_match("/^[A-Z,0-9]{18}[0-9]{2}/", ObjectSerializer::toString($lei)))) {
            throw new \InvalidArgumentException("invalid value for \$lei when calling EntityClientCreateSchema., must conform to the pattern /^[A-Z,0-9]{18}[0-9]{2}/.");
        }

        $this->container['lei'] = $lei;

        return $this;
    }

    /**
     * Gets adviser_firm_ref
     *
     * @return string
     */
    public function getAdviserFirmRef()
    {
        return $this->container['adviser_firm_ref'];
    }

    /**
     * Sets adviser_firm_ref
     *
     * @param string $adviser_firm_ref adviser_firm_ref
     *
     * @return self
     */
    public function setAdviserFirmRef($adviser_firm_ref)
    {
        if (is_null($adviser_firm_ref)) {
            throw new \InvalidArgumentException('non-nullable adviser_firm_ref cannot be null');
        }
        $this->container['adviser_firm_ref'] = $adviser_firm_ref;

        return $this;
    }

    /**
     * Gets associated_existing_users
     *
     * @return \OpenAPI\Client\Model\AssociatedUserLinkSchema[]|null
     */
    public function getAssociatedExistingUsers()
    {
        return $this->container['associated_existing_users'];
    }

    /**
     * Sets associated_existing_users
     *
     * @param \OpenAPI\Client\Model\AssociatedUserLinkSchema[]|null $associated_existing_users associated_existing_users
     *
     * @return self
     */
    public function setAssociatedExistingUsers($associated_existing_users)
    {
        if (is_null($associated_existing_users)) {
            throw new \InvalidArgumentException('non-nullable associated_existing_users cannot be null');
        }
        $this->container['associated_existing_users'] = $associated_existing_users;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenAPI\Client\Model\NestedClientAddressCreateSchema[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenAPI\Client\Model\NestedClientAddressCreateSchema[] $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number Must be a string of numbers and special characters (\"()\", \"-\", \"+\", \" \")
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }

        if ((!preg_match("/^\\s*(?:\\+?(\\d{1,6}))?[-.\\s(]*(\\d{1,6})[-.\\s)]*(\\d{1,6})([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?(?: *(\\d+))?\\s*$/", ObjectSerializer::toString($phone_number)))) {
            throw new \InvalidArgumentException("invalid value for \$phone_number when calling EntityClientCreateSchema., must conform to the pattern /^\\s*(?:\\+?(\\d{1,6}))?[-.\\s(]*(\\d{1,6})[-.\\s)]*(\\d{1,6})([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?(?: *(\\d+))?\\s*$/.");
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets date_of_incorporation
     *
     * @return \DateTime
     */
    public function getDateOfIncorporation()
    {
        return $this->container['date_of_incorporation'];
    }

    /**
     * Sets date_of_incorporation
     *
     * @param \DateTime $date_of_incorporation date_of_incorporation
     *
     * @return self
     */
    public function setDateOfIncorporation($date_of_incorporation)
    {
        if (is_null($date_of_incorporation)) {
            throw new \InvalidArgumentException('non-nullable date_of_incorporation cannot be null');
        }
        $this->container['date_of_incorporation'] = $date_of_incorporation;

        return $this;
    }

    /**
     * Gets company_reg_number
     *
     * @return string|null
     */
    public function getCompanyRegNumber()
    {
        return $this->container['company_reg_number'];
    }

    /**
     * Sets company_reg_number
     *
     * @param string|null $company_reg_number company_reg_number
     *
     * @return self
     */
    public function setCompanyRegNumber($company_reg_number)
    {
        if (is_null($company_reg_number)) {
            throw new \InvalidArgumentException('non-nullable company_reg_number cannot be null');
        }
        $this->container['company_reg_number'] = $company_reg_number;

        return $this;
    }

    /**
     * Gets company_business_nature
     *
     * @return string|null
     */
    public function getCompanyBusinessNature()
    {
        return $this->container['company_business_nature'];
    }

    /**
     * Sets company_business_nature
     *
     * @param string|null $company_business_nature company_business_nature
     *
     * @return self
     */
    public function setCompanyBusinessNature($company_business_nature)
    {
        if (is_null($company_business_nature)) {
            throw new \InvalidArgumentException('non-nullable company_business_nature cannot be null');
        }
        $this->container['company_business_nature'] = $company_business_nature;

        return $this;
    }

    /**
     * Gets country_of_incorporation
     *
     * @return string|null
     */
    public function getCountryOfIncorporation()
    {
        return $this->container['country_of_incorporation'];
    }

    /**
     * Sets country_of_incorporation
     *
     * @param string|null $country_of_incorporation Must be a string of letters of length 2, based on the ISO alpha-2 codes
     *
     * @return self
     */
    public function setCountryOfIncorporation($country_of_incorporation)
    {
        if (is_null($country_of_incorporation)) {
            throw new \InvalidArgumentException('non-nullable country_of_incorporation cannot be null');
        }

        if ((!preg_match("/^[A-Z]{2}$/", ObjectSerializer::toString($country_of_incorporation)))) {
            throw new \InvalidArgumentException("invalid value for \$country_of_incorporation when calling EntityClientCreateSchema., must conform to the pattern /^[A-Z]{2}$/.");
        }

        $this->container['country_of_incorporation'] = $country_of_incorporation;

        return $this;
    }

    /**
     * Gets pension_scheme_tax_reference
     *
     * @return string|null
     */
    public function getPensionSchemeTaxReference()
    {
        return $this->container['pension_scheme_tax_reference'];
    }

    /**
     * Sets pension_scheme_tax_reference
     *
     * @param string|null $pension_scheme_tax_reference pension_scheme_tax_reference
     *
     * @return self
     */
    public function setPensionSchemeTaxReference($pension_scheme_tax_reference)
    {
        if (is_null($pension_scheme_tax_reference)) {
            throw new \InvalidArgumentException('non-nullable pension_scheme_tax_reference cannot be null');
        }
        $this->container['pension_scheme_tax_reference'] = $pension_scheme_tax_reference;

        return $this;
    }

    /**
     * Gets is_associate
     *
     * @return bool|null
     */
    public function getIsAssociate()
    {
        return $this->container['is_associate'];
    }

    /**
     * Sets is_associate
     *
     * @param bool|null $is_associate is_associate
     *
     * @return self
     */
    public function setIsAssociate($is_associate)
    {
        if (is_null($is_associate)) {
            throw new \InvalidArgumentException('non-nullable is_associate cannot be null');
        }
        $this->container['is_associate'] = $is_associate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


