<?php
/**
 * AdviserFirmCreateSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AdviserFirmCreateSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdviserFirmCreateSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdviserFirmCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'firm_name' => 'string',
        'ref' => 'string',
        'auto_service_name' => 'string',
        'auto_liberty_ref' => 'string',
        'support_email' => 'string',
        'phone_number' => 'string',
        'companies_house_registration_number' => 'string',
        'fca_registration_number' => 'string',
        'firm_type' => '\OpenAPI\Client\Model\AdviserFirmType',
        'subdomain' => 'string',
        'style_override' => 'string',
        'addresses' => '\OpenAPI\Client\Model\AdviserFirmAddressCreateSchema[]',
        'options' => '\OpenAPI\Client\Model\AdviserFirmOptionCreateSchema',
        'advisers' => '\OpenAPI\Client\Model\AdviserCreateSchema[]',
        'fees' => '\OpenAPI\Client\Model\AdviserFirmFeeCreateSchema[]',
        'documents' => '\OpenAPI\Client\Model\AdviserDocumentCreateSchema[]',
        'investment_management_firms' => '\OpenAPI\Client\Model\AdviserFirmInvestmentManagementFirmLinkCreateSchema[]',
        'rpp_links' => '\OpenAPI\Client\Model\AdviserFirmRppLinkCreateSchema[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'firm_name' => null,
        'ref' => null,
        'auto_service_name' => null,
        'auto_liberty_ref' => null,
        'support_email' => 'email',
        'phone_number' => null,
        'companies_house_registration_number' => null,
        'fca_registration_number' => null,
        'firm_type' => null,
        'subdomain' => null,
        'style_override' => null,
        'addresses' => null,
        'options' => null,
        'advisers' => null,
        'fees' => null,
        'documents' => null,
        'investment_management_firms' => null,
        'rpp_links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'firm_name' => false,
        'ref' => false,
        'auto_service_name' => false,
        'auto_liberty_ref' => false,
        'support_email' => false,
        'phone_number' => false,
        'companies_house_registration_number' => false,
        'fca_registration_number' => false,
        'firm_type' => false,
        'subdomain' => false,
        'style_override' => false,
        'addresses' => false,
        'options' => false,
        'advisers' => false,
        'fees' => false,
        'documents' => false,
        'investment_management_firms' => false,
        'rpp_links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'firm_name' => 'firm_name',
        'ref' => 'ref',
        'auto_service_name' => 'auto_service_name',
        'auto_liberty_ref' => 'auto_liberty_ref',
        'support_email' => 'support_email',
        'phone_number' => 'phone_number',
        'companies_house_registration_number' => 'companies_house_registration_number',
        'fca_registration_number' => 'fca_registration_number',
        'firm_type' => 'firm_type',
        'subdomain' => 'subdomain',
        'style_override' => 'style_override',
        'addresses' => 'addresses',
        'options' => 'options',
        'advisers' => 'advisers',
        'fees' => 'fees',
        'documents' => 'documents',
        'investment_management_firms' => 'investment_management_firms',
        'rpp_links' => 'rpp_links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'firm_name' => 'setFirmName',
        'ref' => 'setRef',
        'auto_service_name' => 'setAutoServiceName',
        'auto_liberty_ref' => 'setAutoLibertyRef',
        'support_email' => 'setSupportEmail',
        'phone_number' => 'setPhoneNumber',
        'companies_house_registration_number' => 'setCompaniesHouseRegistrationNumber',
        'fca_registration_number' => 'setFcaRegistrationNumber',
        'firm_type' => 'setFirmType',
        'subdomain' => 'setSubdomain',
        'style_override' => 'setStyleOverride',
        'addresses' => 'setAddresses',
        'options' => 'setOptions',
        'advisers' => 'setAdvisers',
        'fees' => 'setFees',
        'documents' => 'setDocuments',
        'investment_management_firms' => 'setInvestmentManagementFirms',
        'rpp_links' => 'setRppLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'firm_name' => 'getFirmName',
        'ref' => 'getRef',
        'auto_service_name' => 'getAutoServiceName',
        'auto_liberty_ref' => 'getAutoLibertyRef',
        'support_email' => 'getSupportEmail',
        'phone_number' => 'getPhoneNumber',
        'companies_house_registration_number' => 'getCompaniesHouseRegistrationNumber',
        'fca_registration_number' => 'getFcaRegistrationNumber',
        'firm_type' => 'getFirmType',
        'subdomain' => 'getSubdomain',
        'style_override' => 'getStyleOverride',
        'addresses' => 'getAddresses',
        'options' => 'getOptions',
        'advisers' => 'getAdvisers',
        'fees' => 'getFees',
        'documents' => 'getDocuments',
        'investment_management_firms' => 'getInvestmentManagementFirms',
        'rpp_links' => 'getRppLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('firm_name', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('auto_service_name', $data ?? [], null);
        $this->setIfExists('auto_liberty_ref', $data ?? [], null);
        $this->setIfExists('support_email', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('companies_house_registration_number', $data ?? [], null);
        $this->setIfExists('fca_registration_number', $data ?? [], null);
        $this->setIfExists('firm_type', $data ?? [], null);
        $this->setIfExists('subdomain', $data ?? [], null);
        $this->setIfExists('style_override', $data ?? [], 'fundment');
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('options', $data ?? [], null);
        $this->setIfExists('advisers', $data ?? [], null);
        $this->setIfExists('fees', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('investment_management_firms', $data ?? [], null);
        $this->setIfExists('rpp_links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['firm_name'] === null) {
            $invalidProperties[] = "'firm_name' can't be null";
        }
        if ((mb_strlen($this->container['firm_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'firm_name', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['ref'] === null) {
            $invalidProperties[] = "'ref' can't be null";
        }
        if ($this->container['support_email'] === null) {
            $invalidProperties[] = "'support_email' can't be null";
        }
        if ($this->container['phone_number'] === null) {
            $invalidProperties[] = "'phone_number' can't be null";
        }
        if (!preg_match("/^\\s*(?:\\+?(\\d{1,6}))?[-.\\s(]*(\\d{1,6})[-.\\s)]*(\\d{1,6})([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?(?: *(\\d+))?\\s*$/", $this->container['phone_number'])) {
            $invalidProperties[] = "invalid value for 'phone_number', must be conform to the pattern /^\\s*(?:\\+?(\\d{1,6}))?[-.\\s(]*(\\d{1,6})[-.\\s)]*(\\d{1,6})([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?(?: *(\\d+))?\\s*$/.";
        }

        if (!is_null($this->container['companies_house_registration_number']) && !preg_match("/^((AC|FC|GE|GN|GS|IC|IP|LP|NA|NF|NI|NL|NO|NP|NR|NZ|OC|R|RC|SA|SC|SF|SI|SL|SO|SP|SR|SZ|ZC)|\\d?\\d)(\\d{6})$/", $this->container['companies_house_registration_number'])) {
            $invalidProperties[] = "invalid value for 'companies_house_registration_number', must be conform to the pattern /^((AC|FC|GE|GN|GS|IC|IP|LP|NA|NF|NI|NL|NO|NP|NR|NZ|OC|R|RC|SA|SC|SF|SI|SL|SO|SP|SR|SZ|ZC)|\\d?\\d)(\\d{6})$/.";
        }

        if ($this->container['fca_registration_number'] === null) {
            $invalidProperties[] = "'fca_registration_number' can't be null";
        }
        if (!preg_match("/^1?[0-9]{6}$/", $this->container['fca_registration_number'])) {
            $invalidProperties[] = "invalid value for 'fca_registration_number', must be conform to the pattern /^1?[0-9]{6}$/.";
        }

        if ($this->container['addresses'] === null) {
            $invalidProperties[] = "'addresses' can't be null";
        }
        if ((count($this->container['addresses']) < 1)) {
            $invalidProperties[] = "invalid value for 'addresses', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets firm_name
     *
     * @return string
     */
    public function getFirmName()
    {
        return $this->container['firm_name'];
    }

    /**
     * Sets firm_name
     *
     * @param string $firm_name firm_name
     *
     * @return self
     */
    public function setFirmName($firm_name)
    {
        if (is_null($firm_name)) {
            throw new \InvalidArgumentException('non-nullable firm_name cannot be null');
        }
        if ((mb_strlen($firm_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $firm_name when calling AdviserFirmCreateSchema., must be smaller than or equal to 50.');
        }

        $this->container['firm_name'] = $firm_name;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string $ref ref
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets auto_service_name
     *
     * @return string|null
     */
    public function getAutoServiceName()
    {
        return $this->container['auto_service_name'];
    }

    /**
     * Sets auto_service_name
     *
     * @param string|null $auto_service_name auto_service_name
     *
     * @return self
     */
    public function setAutoServiceName($auto_service_name)
    {
        if (is_null($auto_service_name)) {
            throw new \InvalidArgumentException('non-nullable auto_service_name cannot be null');
        }
        $this->container['auto_service_name'] = $auto_service_name;

        return $this;
    }

    /**
     * Gets auto_liberty_ref
     *
     * @return string|null
     */
    public function getAutoLibertyRef()
    {
        return $this->container['auto_liberty_ref'];
    }

    /**
     * Sets auto_liberty_ref
     *
     * @param string|null $auto_liberty_ref auto_liberty_ref
     *
     * @return self
     */
    public function setAutoLibertyRef($auto_liberty_ref)
    {
        if (is_null($auto_liberty_ref)) {
            throw new \InvalidArgumentException('non-nullable auto_liberty_ref cannot be null');
        }
        $this->container['auto_liberty_ref'] = $auto_liberty_ref;

        return $this;
    }

    /**
     * Gets support_email
     *
     * @return string
     */
    public function getSupportEmail()
    {
        return $this->container['support_email'];
    }

    /**
     * Sets support_email
     *
     * @param string $support_email support_email
     *
     * @return self
     */
    public function setSupportEmail($support_email)
    {
        if (is_null($support_email)) {
            throw new \InvalidArgumentException('non-nullable support_email cannot be null');
        }
        $this->container['support_email'] = $support_email;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string $phone_number Must be a string of numbers and special characters (\"()\", \"-\", \"+\", \" \")
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }

        if ((!preg_match("/^\\s*(?:\\+?(\\d{1,6}))?[-.\\s(]*(\\d{1,6})[-.\\s)]*(\\d{1,6})([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?(?: *(\\d+))?\\s*$/", ObjectSerializer::toString($phone_number)))) {
            throw new \InvalidArgumentException("invalid value for \$phone_number when calling AdviserFirmCreateSchema., must conform to the pattern /^\\s*(?:\\+?(\\d{1,6}))?[-.\\s(]*(\\d{1,6})[-.\\s)]*(\\d{1,6})([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?([-.\\s]*(\\d{1,6})[-.\\s]*)?(?: *(\\d+))?\\s*$/.");
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets companies_house_registration_number
     *
     * @return string|null
     */
    public function getCompaniesHouseRegistrationNumber()
    {
        return $this->container['companies_house_registration_number'];
    }

    /**
     * Sets companies_house_registration_number
     *
     * @param string|null $companies_house_registration_number Must be a valid Company Registration Number
     *
     * @return self
     */
    public function setCompaniesHouseRegistrationNumber($companies_house_registration_number)
    {
        if (is_null($companies_house_registration_number)) {
            throw new \InvalidArgumentException('non-nullable companies_house_registration_number cannot be null');
        }

        if ((!preg_match("/^((AC|FC|GE|GN|GS|IC|IP|LP|NA|NF|NI|NL|NO|NP|NR|NZ|OC|R|RC|SA|SC|SF|SI|SL|SO|SP|SR|SZ|ZC)|\\d?\\d)(\\d{6})$/", ObjectSerializer::toString($companies_house_registration_number)))) {
            throw new \InvalidArgumentException("invalid value for \$companies_house_registration_number when calling AdviserFirmCreateSchema., must conform to the pattern /^((AC|FC|GE|GN|GS|IC|IP|LP|NA|NF|NI|NL|NO|NP|NR|NZ|OC|R|RC|SA|SC|SF|SI|SL|SO|SP|SR|SZ|ZC)|\\d?\\d)(\\d{6})$/.");
        }

        $this->container['companies_house_registration_number'] = $companies_house_registration_number;

        return $this;
    }

    /**
     * Gets fca_registration_number
     *
     * @return string
     */
    public function getFcaRegistrationNumber()
    {
        return $this->container['fca_registration_number'];
    }

    /**
     * Sets fca_registration_number
     *
     * @param string $fca_registration_number Must be a valid FCA registration number
     *
     * @return self
     */
    public function setFcaRegistrationNumber($fca_registration_number)
    {
        if (is_null($fca_registration_number)) {
            throw new \InvalidArgumentException('non-nullable fca_registration_number cannot be null');
        }

        if ((!preg_match("/^1?[0-9]{6}$/", ObjectSerializer::toString($fca_registration_number)))) {
            throw new \InvalidArgumentException("invalid value for \$fca_registration_number when calling AdviserFirmCreateSchema., must conform to the pattern /^1?[0-9]{6}$/.");
        }

        $this->container['fca_registration_number'] = $fca_registration_number;

        return $this;
    }

    /**
     * Gets firm_type
     *
     * @return \OpenAPI\Client\Model\AdviserFirmType|null
     */
    public function getFirmType()
    {
        return $this->container['firm_type'];
    }

    /**
     * Sets firm_type
     *
     * @param \OpenAPI\Client\Model\AdviserFirmType|null $firm_type firm_type
     *
     * @return self
     */
    public function setFirmType($firm_type)
    {
        if (is_null($firm_type)) {
            throw new \InvalidArgumentException('non-nullable firm_type cannot be null');
        }
        $this->container['firm_type'] = $firm_type;

        return $this;
    }

    /**
     * Gets subdomain
     *
     * @return string|null
     */
    public function getSubdomain()
    {
        return $this->container['subdomain'];
    }

    /**
     * Sets subdomain
     *
     * @param string|null $subdomain subdomain
     *
     * @return self
     */
    public function setSubdomain($subdomain)
    {
        if (is_null($subdomain)) {
            throw new \InvalidArgumentException('non-nullable subdomain cannot be null');
        }
        $this->container['subdomain'] = $subdomain;

        return $this;
    }

    /**
     * Gets style_override
     *
     * @return string|null
     */
    public function getStyleOverride()
    {
        return $this->container['style_override'];
    }

    /**
     * Sets style_override
     *
     * @param string|null $style_override style_override
     *
     * @return self
     */
    public function setStyleOverride($style_override)
    {
        if (is_null($style_override)) {
            throw new \InvalidArgumentException('non-nullable style_override cannot be null');
        }
        $this->container['style_override'] = $style_override;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenAPI\Client\Model\AdviserFirmAddressCreateSchema[]
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenAPI\Client\Model\AdviserFirmAddressCreateSchema[] $addresses addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }


        if ((count($addresses) < 1)) {
            throw new \InvalidArgumentException('invalid length for $addresses when calling AdviserFirmCreateSchema., number of items must be greater than or equal to 1.');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets options
     *
     * @return \OpenAPI\Client\Model\AdviserFirmOptionCreateSchema|null
     */
    public function getOptions()
    {
        return $this->container['options'];
    }

    /**
     * Sets options
     *
     * @param \OpenAPI\Client\Model\AdviserFirmOptionCreateSchema|null $options options
     *
     * @return self
     */
    public function setOptions($options)
    {
        if (is_null($options)) {
            throw new \InvalidArgumentException('non-nullable options cannot be null');
        }
        $this->container['options'] = $options;

        return $this;
    }

    /**
     * Gets advisers
     *
     * @return \OpenAPI\Client\Model\AdviserCreateSchema[]|null
     */
    public function getAdvisers()
    {
        return $this->container['advisers'];
    }

    /**
     * Sets advisers
     *
     * @param \OpenAPI\Client\Model\AdviserCreateSchema[]|null $advisers advisers
     *
     * @return self
     */
    public function setAdvisers($advisers)
    {
        if (is_null($advisers)) {
            throw new \InvalidArgumentException('non-nullable advisers cannot be null');
        }
        $this->container['advisers'] = $advisers;

        return $this;
    }

    /**
     * Gets fees
     *
     * @return \OpenAPI\Client\Model\AdviserFirmFeeCreateSchema[]|null
     */
    public function getFees()
    {
        return $this->container['fees'];
    }

    /**
     * Sets fees
     *
     * @param \OpenAPI\Client\Model\AdviserFirmFeeCreateSchema[]|null $fees fees
     *
     * @return self
     */
    public function setFees($fees)
    {
        if (is_null($fees)) {
            throw new \InvalidArgumentException('non-nullable fees cannot be null');
        }
        $this->container['fees'] = $fees;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \OpenAPI\Client\Model\AdviserDocumentCreateSchema[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \OpenAPI\Client\Model\AdviserDocumentCreateSchema[]|null $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets investment_management_firms
     *
     * @return \OpenAPI\Client\Model\AdviserFirmInvestmentManagementFirmLinkCreateSchema[]|null
     */
    public function getInvestmentManagementFirms()
    {
        return $this->container['investment_management_firms'];
    }

    /**
     * Sets investment_management_firms
     *
     * @param \OpenAPI\Client\Model\AdviserFirmInvestmentManagementFirmLinkCreateSchema[]|null $investment_management_firms investment_management_firms
     *
     * @return self
     */
    public function setInvestmentManagementFirms($investment_management_firms)
    {
        if (is_null($investment_management_firms)) {
            throw new \InvalidArgumentException('non-nullable investment_management_firms cannot be null');
        }
        $this->container['investment_management_firms'] = $investment_management_firms;

        return $this;
    }

    /**
     * Gets rpp_links
     *
     * @return \OpenAPI\Client\Model\AdviserFirmRppLinkCreateSchema[]|null
     */
    public function getRppLinks()
    {
        return $this->container['rpp_links'];
    }

    /**
     * Sets rpp_links
     *
     * @param \OpenAPI\Client\Model\AdviserFirmRppLinkCreateSchema[]|null $rpp_links rpp_links
     *
     * @return self
     */
    public function setRppLinks($rpp_links)
    {
        if (is_null($rpp_links)) {
            throw new \InvalidArgumentException('non-nullable rpp_links cannot be null');
        }
        $this->container['rpp_links'] = $rpp_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


