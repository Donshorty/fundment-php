<?php
/**
 * FeeScheduleConstraintReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FeeScheduleConstraintReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FeeScheduleConstraintReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FeeScheduleConstraintReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'adviser_firm' => '\OpenAPI\Client\Model\ConstraintInfoReturnSchema',
        'network' => '\OpenAPI\Client\Model\ConstraintInfoReturnSchema',
        'client' => '\OpenAPI\Client\Model\ConstraintInfoReturnSchema',
        'investment_management_firm' => '\OpenAPI\Client\Model\ConstraintInfoReturnSchema',
        'client_group' => '\OpenAPI\Client\Model\ConstraintInfoReturnSchema',
        'investment_strategy_group' => '\OpenAPI\Client\Model\ConstraintInfoReturnSchema',
        'account_type' => '\OpenAPI\Client\Model\ConstraintInfoReturnSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'adviser_firm' => null,
        'network' => null,
        'client' => null,
        'investment_management_firm' => null,
        'client_group' => null,
        'investment_strategy_group' => null,
        'account_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'adviser_firm' => false,
        'network' => false,
        'client' => false,
        'investment_management_firm' => false,
        'client_group' => false,
        'investment_strategy_group' => false,
        'account_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'adviser_firm' => 'adviser_firm',
        'network' => 'network',
        'client' => 'client',
        'investment_management_firm' => 'investment_management_firm',
        'client_group' => 'client_group',
        'investment_strategy_group' => 'investment_strategy_group',
        'account_type' => 'account_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'adviser_firm' => 'setAdviserFirm',
        'network' => 'setNetwork',
        'client' => 'setClient',
        'investment_management_firm' => 'setInvestmentManagementFirm',
        'client_group' => 'setClientGroup',
        'investment_strategy_group' => 'setInvestmentStrategyGroup',
        'account_type' => 'setAccountType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'adviser_firm' => 'getAdviserFirm',
        'network' => 'getNetwork',
        'client' => 'getClient',
        'investment_management_firm' => 'getInvestmentManagementFirm',
        'client_group' => 'getClientGroup',
        'investment_strategy_group' => 'getInvestmentStrategyGroup',
        'account_type' => 'getAccountType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('adviser_firm', $data ?? [], null);
        $this->setIfExists('network', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
        $this->setIfExists('investment_management_firm', $data ?? [], null);
        $this->setIfExists('client_group', $data ?? [], null);
        $this->setIfExists('investment_strategy_group', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets adviser_firm
     *
     * @return \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null
     */
    public function getAdviserFirm()
    {
        return $this->container['adviser_firm'];
    }

    /**
     * Sets adviser_firm
     *
     * @param \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null $adviser_firm adviser_firm
     *
     * @return self
     */
    public function setAdviserFirm($adviser_firm)
    {
        if (is_null($adviser_firm)) {
            throw new \InvalidArgumentException('non-nullable adviser_firm cannot be null');
        }
        $this->container['adviser_firm'] = $adviser_firm;

        return $this;
    }

    /**
     * Gets network
     *
     * @return \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null
     */
    public function getNetwork()
    {
        return $this->container['network'];
    }

    /**
     * Sets network
     *
     * @param \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null $network network
     *
     * @return self
     */
    public function setNetwork($network)
    {
        if (is_null($network)) {
            throw new \InvalidArgumentException('non-nullable network cannot be null');
        }
        $this->container['network'] = $network;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null $client client
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            throw new \InvalidArgumentException('non-nullable client cannot be null');
        }
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets investment_management_firm
     *
     * @return \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null
     */
    public function getInvestmentManagementFirm()
    {
        return $this->container['investment_management_firm'];
    }

    /**
     * Sets investment_management_firm
     *
     * @param \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null $investment_management_firm investment_management_firm
     *
     * @return self
     */
    public function setInvestmentManagementFirm($investment_management_firm)
    {
        if (is_null($investment_management_firm)) {
            throw new \InvalidArgumentException('non-nullable investment_management_firm cannot be null');
        }
        $this->container['investment_management_firm'] = $investment_management_firm;

        return $this;
    }

    /**
     * Gets client_group
     *
     * @return \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null
     */
    public function getClientGroup()
    {
        return $this->container['client_group'];
    }

    /**
     * Sets client_group
     *
     * @param \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null $client_group client_group
     *
     * @return self
     */
    public function setClientGroup($client_group)
    {
        if (is_null($client_group)) {
            throw new \InvalidArgumentException('non-nullable client_group cannot be null');
        }
        $this->container['client_group'] = $client_group;

        return $this;
    }

    /**
     * Gets investment_strategy_group
     *
     * @return \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null
     */
    public function getInvestmentStrategyGroup()
    {
        return $this->container['investment_strategy_group'];
    }

    /**
     * Sets investment_strategy_group
     *
     * @param \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null $investment_strategy_group investment_strategy_group
     *
     * @return self
     */
    public function setInvestmentStrategyGroup($investment_strategy_group)
    {
        if (is_null($investment_strategy_group)) {
            throw new \InvalidArgumentException('non-nullable investment_strategy_group cannot be null');
        }
        $this->container['investment_strategy_group'] = $investment_strategy_group;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param \OpenAPI\Client\Model\ConstraintInfoReturnSchema|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


