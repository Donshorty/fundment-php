<?php
/**
 * InvestmentManagementFirmOptionsReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvestmentManagementFirmOptionsReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvestmentManagementFirmOptionsReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvestmentManagementFirmOptionsReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ctc_name' => 'string',
        'lei' => 'string',
        'dm_nino' => 'string',
        'acknowledgement_tcs' => 'string',
        'retail_acknowledgement_full' => 'string',
        'retail_acknowledgement_mandate' => 'string',
        'auto_rebalance_allowed' => 'bool',
        'auto_rebalance_threshold_freq' => '\OpenAPI\Client\Model\AutoRebalanceThresholdFrequency',
        'default_rebalance_threshold_pct' => 'int',
        'default_cash_exec_algo' => '\OpenAPI\Client\Model\CashExecAlgo',
        'default_linked_weighting_type' => '\OpenAPI\Client\Model\WeightingType',
        'analysis_period_years' => 'int',
        'fee_charge_frequency' => '\OpenAPI\Client\Model\FeeChargeFrequency',
        'fee_type' => '\OpenAPI\Client\Model\FapiDbHelpersEnumsFeeType',
        'initial_fee_on_recurring_deposit' => 'int',
        'default_weighting_type' => '\OpenAPI\Client\Model\WeightingType',
        'enable_custom_index' => 'bool',
        'mfa_period_days' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ctc_name' => null,
        'lei' => null,
        'dm_nino' => null,
        'acknowledgement_tcs' => null,
        'retail_acknowledgement_full' => null,
        'retail_acknowledgement_mandate' => null,
        'auto_rebalance_allowed' => null,
        'auto_rebalance_threshold_freq' => null,
        'default_rebalance_threshold_pct' => null,
        'default_cash_exec_algo' => null,
        'default_linked_weighting_type' => null,
        'analysis_period_years' => null,
        'fee_charge_frequency' => null,
        'fee_type' => null,
        'initial_fee_on_recurring_deposit' => null,
        'default_weighting_type' => null,
        'enable_custom_index' => null,
        'mfa_period_days' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ctc_name' => false,
        'lei' => false,
        'dm_nino' => false,
        'acknowledgement_tcs' => false,
        'retail_acknowledgement_full' => false,
        'retail_acknowledgement_mandate' => false,
        'auto_rebalance_allowed' => false,
        'auto_rebalance_threshold_freq' => false,
        'default_rebalance_threshold_pct' => false,
        'default_cash_exec_algo' => false,
        'default_linked_weighting_type' => false,
        'analysis_period_years' => false,
        'fee_charge_frequency' => false,
        'fee_type' => false,
        'initial_fee_on_recurring_deposit' => false,
        'default_weighting_type' => false,
        'enable_custom_index' => false,
        'mfa_period_days' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ctc_name' => 'ctc_name',
        'lei' => 'lei',
        'dm_nino' => 'dm_nino',
        'acknowledgement_tcs' => 'acknowledgement_tcs',
        'retail_acknowledgement_full' => 'retail_acknowledgement_full',
        'retail_acknowledgement_mandate' => 'retail_acknowledgement_mandate',
        'auto_rebalance_allowed' => 'auto_rebalance_allowed',
        'auto_rebalance_threshold_freq' => 'auto_rebalance_threshold_freq',
        'default_rebalance_threshold_pct' => 'default_rebalance_threshold_pct',
        'default_cash_exec_algo' => 'default_cash_exec_algo',
        'default_linked_weighting_type' => 'default_linked_weighting_type',
        'analysis_period_years' => 'analysis_period_years',
        'fee_charge_frequency' => 'fee_charge_frequency',
        'fee_type' => 'fee_type',
        'initial_fee_on_recurring_deposit' => 'initial_fee_on_recurring_deposit',
        'default_weighting_type' => 'default_weighting_type',
        'enable_custom_index' => 'enable_custom_index',
        'mfa_period_days' => 'mfa_period_days'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ctc_name' => 'setCtcName',
        'lei' => 'setLei',
        'dm_nino' => 'setDmNino',
        'acknowledgement_tcs' => 'setAcknowledgementTcs',
        'retail_acknowledgement_full' => 'setRetailAcknowledgementFull',
        'retail_acknowledgement_mandate' => 'setRetailAcknowledgementMandate',
        'auto_rebalance_allowed' => 'setAutoRebalanceAllowed',
        'auto_rebalance_threshold_freq' => 'setAutoRebalanceThresholdFreq',
        'default_rebalance_threshold_pct' => 'setDefaultRebalanceThresholdPct',
        'default_cash_exec_algo' => 'setDefaultCashExecAlgo',
        'default_linked_weighting_type' => 'setDefaultLinkedWeightingType',
        'analysis_period_years' => 'setAnalysisPeriodYears',
        'fee_charge_frequency' => 'setFeeChargeFrequency',
        'fee_type' => 'setFeeType',
        'initial_fee_on_recurring_deposit' => 'setInitialFeeOnRecurringDeposit',
        'default_weighting_type' => 'setDefaultWeightingType',
        'enable_custom_index' => 'setEnableCustomIndex',
        'mfa_period_days' => 'setMfaPeriodDays'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ctc_name' => 'getCtcName',
        'lei' => 'getLei',
        'dm_nino' => 'getDmNino',
        'acknowledgement_tcs' => 'getAcknowledgementTcs',
        'retail_acknowledgement_full' => 'getRetailAcknowledgementFull',
        'retail_acknowledgement_mandate' => 'getRetailAcknowledgementMandate',
        'auto_rebalance_allowed' => 'getAutoRebalanceAllowed',
        'auto_rebalance_threshold_freq' => 'getAutoRebalanceThresholdFreq',
        'default_rebalance_threshold_pct' => 'getDefaultRebalanceThresholdPct',
        'default_cash_exec_algo' => 'getDefaultCashExecAlgo',
        'default_linked_weighting_type' => 'getDefaultLinkedWeightingType',
        'analysis_period_years' => 'getAnalysisPeriodYears',
        'fee_charge_frequency' => 'getFeeChargeFrequency',
        'fee_type' => 'getFeeType',
        'initial_fee_on_recurring_deposit' => 'getInitialFeeOnRecurringDeposit',
        'default_weighting_type' => 'getDefaultWeightingType',
        'enable_custom_index' => 'getEnableCustomIndex',
        'mfa_period_days' => 'getMfaPeriodDays'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('ctc_name', $data ?? [], null);
        $this->setIfExists('lei', $data ?? [], null);
        $this->setIfExists('dm_nino', $data ?? [], null);
        $this->setIfExists('acknowledgement_tcs', $data ?? [], null);
        $this->setIfExists('retail_acknowledgement_full', $data ?? [], null);
        $this->setIfExists('retail_acknowledgement_mandate', $data ?? [], null);
        $this->setIfExists('auto_rebalance_allowed', $data ?? [], true);
        $this->setIfExists('auto_rebalance_threshold_freq', $data ?? [], null);
        $this->setIfExists('default_rebalance_threshold_pct', $data ?? [], 10);
        $this->setIfExists('default_cash_exec_algo', $data ?? [], null);
        $this->setIfExists('default_linked_weighting_type', $data ?? [], null);
        $this->setIfExists('analysis_period_years', $data ?? [], null);
        $this->setIfExists('fee_charge_frequency', $data ?? [], null);
        $this->setIfExists('fee_type', $data ?? [], null);
        $this->setIfExists('initial_fee_on_recurring_deposit', $data ?? [], null);
        $this->setIfExists('default_weighting_type', $data ?? [], null);
        $this->setIfExists('enable_custom_index', $data ?? [], null);
        $this->setIfExists('mfa_period_days', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['dm_nino']) && (mb_strlen($this->container['dm_nino']) > 9)) {
            $invalidProperties[] = "invalid value for 'dm_nino', the character length must be smaller than or equal to 9.";
        }

        if (!is_null($this->container['acknowledgement_tcs']) && (mb_strlen($this->container['acknowledgement_tcs']) > 4)) {
            $invalidProperties[] = "invalid value for 'acknowledgement_tcs', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['retail_acknowledgement_full']) && (mb_strlen($this->container['retail_acknowledgement_full']) > 4)) {
            $invalidProperties[] = "invalid value for 'retail_acknowledgement_full', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['retail_acknowledgement_mandate']) && (mb_strlen($this->container['retail_acknowledgement_mandate']) > 4)) {
            $invalidProperties[] = "invalid value for 'retail_acknowledgement_mandate', the character length must be smaller than or equal to 4.";
        }

        if ($this->container['initial_fee_on_recurring_deposit'] === null) {
            $invalidProperties[] = "'initial_fee_on_recurring_deposit' can't be null";
        }
        if ($this->container['enable_custom_index'] === null) {
            $invalidProperties[] = "'enable_custom_index' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ctc_name
     *
     * @return string|null
     */
    public function getCtcName()
    {
        return $this->container['ctc_name'];
    }

    /**
     * Sets ctc_name
     *
     * @param string|null $ctc_name ctc_name
     *
     * @return self
     */
    public function setCtcName($ctc_name)
    {
        if (is_null($ctc_name)) {
            throw new \InvalidArgumentException('non-nullable ctc_name cannot be null');
        }
        $this->container['ctc_name'] = $ctc_name;

        return $this;
    }

    /**
     * Gets lei
     *
     * @return string|null
     */
    public function getLei()
    {
        return $this->container['lei'];
    }

    /**
     * Sets lei
     *
     * @param string|null $lei lei
     *
     * @return self
     */
    public function setLei($lei)
    {
        if (is_null($lei)) {
            throw new \InvalidArgumentException('non-nullable lei cannot be null');
        }
        $this->container['lei'] = $lei;

        return $this;
    }

    /**
     * Gets dm_nino
     *
     * @return string|null
     */
    public function getDmNino()
    {
        return $this->container['dm_nino'];
    }

    /**
     * Sets dm_nino
     *
     * @param string|null $dm_nino dm_nino
     *
     * @return self
     */
    public function setDmNino($dm_nino)
    {
        if (is_null($dm_nino)) {
            throw new \InvalidArgumentException('non-nullable dm_nino cannot be null');
        }
        if ((mb_strlen($dm_nino) > 9)) {
            throw new \InvalidArgumentException('invalid length for $dm_nino when calling InvestmentManagementFirmOptionsReturnSchema., must be smaller than or equal to 9.');
        }

        $this->container['dm_nino'] = $dm_nino;

        return $this;
    }

    /**
     * Gets acknowledgement_tcs
     *
     * @return string|null
     */
    public function getAcknowledgementTcs()
    {
        return $this->container['acknowledgement_tcs'];
    }

    /**
     * Sets acknowledgement_tcs
     *
     * @param string|null $acknowledgement_tcs acknowledgement_tcs
     *
     * @return self
     */
    public function setAcknowledgementTcs($acknowledgement_tcs)
    {
        if (is_null($acknowledgement_tcs)) {
            throw new \InvalidArgumentException('non-nullable acknowledgement_tcs cannot be null');
        }
        if ((mb_strlen($acknowledgement_tcs) > 4)) {
            throw new \InvalidArgumentException('invalid length for $acknowledgement_tcs when calling InvestmentManagementFirmOptionsReturnSchema., must be smaller than or equal to 4.');
        }

        $this->container['acknowledgement_tcs'] = $acknowledgement_tcs;

        return $this;
    }

    /**
     * Gets retail_acknowledgement_full
     *
     * @return string|null
     */
    public function getRetailAcknowledgementFull()
    {
        return $this->container['retail_acknowledgement_full'];
    }

    /**
     * Sets retail_acknowledgement_full
     *
     * @param string|null $retail_acknowledgement_full retail_acknowledgement_full
     *
     * @return self
     */
    public function setRetailAcknowledgementFull($retail_acknowledgement_full)
    {
        if (is_null($retail_acknowledgement_full)) {
            throw new \InvalidArgumentException('non-nullable retail_acknowledgement_full cannot be null');
        }
        if ((mb_strlen($retail_acknowledgement_full) > 4)) {
            throw new \InvalidArgumentException('invalid length for $retail_acknowledgement_full when calling InvestmentManagementFirmOptionsReturnSchema., must be smaller than or equal to 4.');
        }

        $this->container['retail_acknowledgement_full'] = $retail_acknowledgement_full;

        return $this;
    }

    /**
     * Gets retail_acknowledgement_mandate
     *
     * @return string|null
     */
    public function getRetailAcknowledgementMandate()
    {
        return $this->container['retail_acknowledgement_mandate'];
    }

    /**
     * Sets retail_acknowledgement_mandate
     *
     * @param string|null $retail_acknowledgement_mandate retail_acknowledgement_mandate
     *
     * @return self
     */
    public function setRetailAcknowledgementMandate($retail_acknowledgement_mandate)
    {
        if (is_null($retail_acknowledgement_mandate)) {
            throw new \InvalidArgumentException('non-nullable retail_acknowledgement_mandate cannot be null');
        }
        if ((mb_strlen($retail_acknowledgement_mandate) > 4)) {
            throw new \InvalidArgumentException('invalid length for $retail_acknowledgement_mandate when calling InvestmentManagementFirmOptionsReturnSchema., must be smaller than or equal to 4.');
        }

        $this->container['retail_acknowledgement_mandate'] = $retail_acknowledgement_mandate;

        return $this;
    }

    /**
     * Gets auto_rebalance_allowed
     *
     * @return bool|null
     */
    public function getAutoRebalanceAllowed()
    {
        return $this->container['auto_rebalance_allowed'];
    }

    /**
     * Sets auto_rebalance_allowed
     *
     * @param bool|null $auto_rebalance_allowed auto_rebalance_allowed
     *
     * @return self
     */
    public function setAutoRebalanceAllowed($auto_rebalance_allowed)
    {
        if (is_null($auto_rebalance_allowed)) {
            throw new \InvalidArgumentException('non-nullable auto_rebalance_allowed cannot be null');
        }
        $this->container['auto_rebalance_allowed'] = $auto_rebalance_allowed;

        return $this;
    }

    /**
     * Gets auto_rebalance_threshold_freq
     *
     * @return \OpenAPI\Client\Model\AutoRebalanceThresholdFrequency|null
     */
    public function getAutoRebalanceThresholdFreq()
    {
        return $this->container['auto_rebalance_threshold_freq'];
    }

    /**
     * Sets auto_rebalance_threshold_freq
     *
     * @param \OpenAPI\Client\Model\AutoRebalanceThresholdFrequency|null $auto_rebalance_threshold_freq auto_rebalance_threshold_freq
     *
     * @return self
     */
    public function setAutoRebalanceThresholdFreq($auto_rebalance_threshold_freq)
    {
        if (is_null($auto_rebalance_threshold_freq)) {
            throw new \InvalidArgumentException('non-nullable auto_rebalance_threshold_freq cannot be null');
        }
        $this->container['auto_rebalance_threshold_freq'] = $auto_rebalance_threshold_freq;

        return $this;
    }

    /**
     * Gets default_rebalance_threshold_pct
     *
     * @return int|null
     */
    public function getDefaultRebalanceThresholdPct()
    {
        return $this->container['default_rebalance_threshold_pct'];
    }

    /**
     * Sets default_rebalance_threshold_pct
     *
     * @param int|null $default_rebalance_threshold_pct default_rebalance_threshold_pct
     *
     * @return self
     */
    public function setDefaultRebalanceThresholdPct($default_rebalance_threshold_pct)
    {
        if (is_null($default_rebalance_threshold_pct)) {
            throw new \InvalidArgumentException('non-nullable default_rebalance_threshold_pct cannot be null');
        }
        $this->container['default_rebalance_threshold_pct'] = $default_rebalance_threshold_pct;

        return $this;
    }

    /**
     * Gets default_cash_exec_algo
     *
     * @return \OpenAPI\Client\Model\CashExecAlgo|null
     */
    public function getDefaultCashExecAlgo()
    {
        return $this->container['default_cash_exec_algo'];
    }

    /**
     * Sets default_cash_exec_algo
     *
     * @param \OpenAPI\Client\Model\CashExecAlgo|null $default_cash_exec_algo default_cash_exec_algo
     *
     * @return self
     */
    public function setDefaultCashExecAlgo($default_cash_exec_algo)
    {
        if (is_null($default_cash_exec_algo)) {
            throw new \InvalidArgumentException('non-nullable default_cash_exec_algo cannot be null');
        }
        $this->container['default_cash_exec_algo'] = $default_cash_exec_algo;

        return $this;
    }

    /**
     * Gets default_linked_weighting_type
     *
     * @return \OpenAPI\Client\Model\WeightingType|null
     */
    public function getDefaultLinkedWeightingType()
    {
        return $this->container['default_linked_weighting_type'];
    }

    /**
     * Sets default_linked_weighting_type
     *
     * @param \OpenAPI\Client\Model\WeightingType|null $default_linked_weighting_type default_linked_weighting_type
     *
     * @return self
     */
    public function setDefaultLinkedWeightingType($default_linked_weighting_type)
    {
        if (is_null($default_linked_weighting_type)) {
            throw new \InvalidArgumentException('non-nullable default_linked_weighting_type cannot be null');
        }
        $this->container['default_linked_weighting_type'] = $default_linked_weighting_type;

        return $this;
    }

    /**
     * Gets analysis_period_years
     *
     * @return int|null
     */
    public function getAnalysisPeriodYears()
    {
        return $this->container['analysis_period_years'];
    }

    /**
     * Sets analysis_period_years
     *
     * @param int|null $analysis_period_years analysis_period_years
     *
     * @return self
     */
    public function setAnalysisPeriodYears($analysis_period_years)
    {
        if (is_null($analysis_period_years)) {
            throw new \InvalidArgumentException('non-nullable analysis_period_years cannot be null');
        }
        $this->container['analysis_period_years'] = $analysis_period_years;

        return $this;
    }

    /**
     * Gets fee_charge_frequency
     *
     * @return \OpenAPI\Client\Model\FeeChargeFrequency|null
     */
    public function getFeeChargeFrequency()
    {
        return $this->container['fee_charge_frequency'];
    }

    /**
     * Sets fee_charge_frequency
     *
     * @param \OpenAPI\Client\Model\FeeChargeFrequency|null $fee_charge_frequency fee_charge_frequency
     *
     * @return self
     */
    public function setFeeChargeFrequency($fee_charge_frequency)
    {
        if (is_null($fee_charge_frequency)) {
            throw new \InvalidArgumentException('non-nullable fee_charge_frequency cannot be null');
        }
        $this->container['fee_charge_frequency'] = $fee_charge_frequency;

        return $this;
    }

    /**
     * Gets fee_type
     *
     * @return \OpenAPI\Client\Model\FapiDbHelpersEnumsFeeType|null
     */
    public function getFeeType()
    {
        return $this->container['fee_type'];
    }

    /**
     * Sets fee_type
     *
     * @param \OpenAPI\Client\Model\FapiDbHelpersEnumsFeeType|null $fee_type fee_type
     *
     * @return self
     */
    public function setFeeType($fee_type)
    {
        if (is_null($fee_type)) {
            throw new \InvalidArgumentException('non-nullable fee_type cannot be null');
        }
        $this->container['fee_type'] = $fee_type;

        return $this;
    }

    /**
     * Gets initial_fee_on_recurring_deposit
     *
     * @return int
     */
    public function getInitialFeeOnRecurringDeposit()
    {
        return $this->container['initial_fee_on_recurring_deposit'];
    }

    /**
     * Sets initial_fee_on_recurring_deposit
     *
     * @param int $initial_fee_on_recurring_deposit initial_fee_on_recurring_deposit
     *
     * @return self
     */
    public function setInitialFeeOnRecurringDeposit($initial_fee_on_recurring_deposit)
    {
        if (is_null($initial_fee_on_recurring_deposit)) {
            throw new \InvalidArgumentException('non-nullable initial_fee_on_recurring_deposit cannot be null');
        }
        $this->container['initial_fee_on_recurring_deposit'] = $initial_fee_on_recurring_deposit;

        return $this;
    }

    /**
     * Gets default_weighting_type
     *
     * @return \OpenAPI\Client\Model\WeightingType|null
     */
    public function getDefaultWeightingType()
    {
        return $this->container['default_weighting_type'];
    }

    /**
     * Sets default_weighting_type
     *
     * @param \OpenAPI\Client\Model\WeightingType|null $default_weighting_type default_weighting_type
     *
     * @return self
     */
    public function setDefaultWeightingType($default_weighting_type)
    {
        if (is_null($default_weighting_type)) {
            throw new \InvalidArgumentException('non-nullable default_weighting_type cannot be null');
        }
        $this->container['default_weighting_type'] = $default_weighting_type;

        return $this;
    }

    /**
     * Gets enable_custom_index
     *
     * @return bool
     */
    public function getEnableCustomIndex()
    {
        return $this->container['enable_custom_index'];
    }

    /**
     * Sets enable_custom_index
     *
     * @param bool $enable_custom_index enable_custom_index
     *
     * @return self
     */
    public function setEnableCustomIndex($enable_custom_index)
    {
        if (is_null($enable_custom_index)) {
            throw new \InvalidArgumentException('non-nullable enable_custom_index cannot be null');
        }
        $this->container['enable_custom_index'] = $enable_custom_index;

        return $this;
    }

    /**
     * Gets mfa_period_days
     *
     * @return string|null
     */
    public function getMfaPeriodDays()
    {
        return $this->container['mfa_period_days'];
    }

    /**
     * Sets mfa_period_days
     *
     * @param string|null $mfa_period_days mfa_period_days
     *
     * @return self
     */
    public function setMfaPeriodDays($mfa_period_days)
    {
        if (is_null($mfa_period_days)) {
            throw new \InvalidArgumentException('non-nullable mfa_period_days cannot be null');
        }
        $this->container['mfa_period_days'] = $mfa_period_days;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


