<?php
/**
 * SecurityReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SecurityReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SecurityReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SecurityReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'status' => '\OpenAPI\Client\Model\FapiDbSecuritySecurityStatus',
        'security_category' => '\OpenAPI\Client\Model\SecurityCategory',
        'isin' => 'string',
        'ref' => 'int',
        'preferred_broker' => '\OpenAPI\Client\Model\Broker',
        'code' => 'string',
        'currency' => 'string',
        'bb_code' => 'string',
        'date_updated' => '\DateTime',
        'attributes' => '\OpenAPI\Client\Model\SecurityAttributeReturnSchema',
        'notes' => '\OpenAPI\Client\Model\SecurityNoteReturnSchema[]',
        'accesses' => '\OpenAPI\Client\Model\NestedSecurityAccessReturnSchema[]',
        'latest_cost' => '\OpenAPI\Client\Model\SecurityCostReturnSchema',
        'latest_valuation' => '\OpenAPI\Client\Model\SecurityValuationReturnSchema',
        'asset_class' => '\OpenAPI\Client\Model\NestedAssetClassReturnSchema'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'status' => null,
        'security_category' => null,
        'isin' => null,
        'ref' => null,
        'preferred_broker' => null,
        'code' => null,
        'currency' => null,
        'bb_code' => null,
        'date_updated' => 'date-time',
        'attributes' => null,
        'notes' => null,
        'accesses' => null,
        'latest_cost' => null,
        'latest_valuation' => null,
        'asset_class' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'status' => false,
        'security_category' => false,
        'isin' => false,
        'ref' => false,
        'preferred_broker' => false,
        'code' => false,
        'currency' => false,
        'bb_code' => false,
        'date_updated' => false,
        'attributes' => false,
        'notes' => false,
        'accesses' => false,
        'latest_cost' => false,
        'latest_valuation' => false,
        'asset_class' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'status' => 'status',
        'security_category' => 'security_category',
        'isin' => 'isin',
        'ref' => 'ref',
        'preferred_broker' => 'preferred_broker',
        'code' => 'code',
        'currency' => 'currency',
        'bb_code' => 'bb_code',
        'date_updated' => 'date_updated',
        'attributes' => 'attributes',
        'notes' => 'notes',
        'accesses' => 'accesses',
        'latest_cost' => 'latest_cost',
        'latest_valuation' => 'latest_valuation',
        'asset_class' => 'asset_class'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'status' => 'setStatus',
        'security_category' => 'setSecurityCategory',
        'isin' => 'setIsin',
        'ref' => 'setRef',
        'preferred_broker' => 'setPreferredBroker',
        'code' => 'setCode',
        'currency' => 'setCurrency',
        'bb_code' => 'setBbCode',
        'date_updated' => 'setDateUpdated',
        'attributes' => 'setAttributes',
        'notes' => 'setNotes',
        'accesses' => 'setAccesses',
        'latest_cost' => 'setLatestCost',
        'latest_valuation' => 'setLatestValuation',
        'asset_class' => 'setAssetClass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'status' => 'getStatus',
        'security_category' => 'getSecurityCategory',
        'isin' => 'getIsin',
        'ref' => 'getRef',
        'preferred_broker' => 'getPreferredBroker',
        'code' => 'getCode',
        'currency' => 'getCurrency',
        'bb_code' => 'getBbCode',
        'date_updated' => 'getDateUpdated',
        'attributes' => 'getAttributes',
        'notes' => 'getNotes',
        'accesses' => 'getAccesses',
        'latest_cost' => 'getLatestCost',
        'latest_valuation' => 'getLatestValuation',
        'asset_class' => 'getAssetClass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('security_category', $data ?? [], null);
        $this->setIfExists('isin', $data ?? [], null);
        $this->setIfExists('ref', $data ?? [], null);
        $this->setIfExists('preferred_broker', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('bb_code', $data ?? [], null);
        $this->setIfExists('date_updated', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('accesses', $data ?? [], null);
        $this->setIfExists('latest_cost', $data ?? [], null);
        $this->setIfExists('latest_valuation', $data ?? [], null);
        $this->setIfExists('asset_class', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['isin'] === null) {
            $invalidProperties[] = "'isin' can't be null";
        }
        if ($this->container['ref'] === null) {
            $invalidProperties[] = "'ref' can't be null";
        }
        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        if (!is_null($this->container['currency']) && !preg_match("/^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNH|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RMB|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|XSU|YER|ZAR|ZMW|ZWL)$/", $this->container['currency'])) {
            $invalidProperties[] = "invalid value for 'currency', must be conform to the pattern /^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNH|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RMB|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|XSU|YER|ZAR|ZMW|ZWL)$/.";
        }

        if ($this->container['date_updated'] === null) {
            $invalidProperties[] = "'date_updated' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\FapiDbSecuritySecurityStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\FapiDbSecuritySecurityStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets security_category
     *
     * @return \OpenAPI\Client\Model\SecurityCategory|null
     */
    public function getSecurityCategory()
    {
        return $this->container['security_category'];
    }

    /**
     * Sets security_category
     *
     * @param \OpenAPI\Client\Model\SecurityCategory|null $security_category security_category
     *
     * @return self
     */
    public function setSecurityCategory($security_category)
    {
        if (is_null($security_category)) {
            throw new \InvalidArgumentException('non-nullable security_category cannot be null');
        }
        $this->container['security_category'] = $security_category;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string $isin isin
     *
     * @return self
     */
    public function setIsin($isin)
    {
        if (is_null($isin)) {
            throw new \InvalidArgumentException('non-nullable isin cannot be null');
        }
        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return int
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param int $ref ref
     *
     * @return self
     */
    public function setRef($ref)
    {
        if (is_null($ref)) {
            throw new \InvalidArgumentException('non-nullable ref cannot be null');
        }
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets preferred_broker
     *
     * @return \OpenAPI\Client\Model\Broker|null
     */
    public function getPreferredBroker()
    {
        return $this->container['preferred_broker'];
    }

    /**
     * Sets preferred_broker
     *
     * @param \OpenAPI\Client\Model\Broker|null $preferred_broker preferred_broker
     *
     * @return self
     */
    public function setPreferredBroker($preferred_broker)
    {
        if (is_null($preferred_broker)) {
            throw new \InvalidArgumentException('non-nullable preferred_broker cannot be null');
        }
        $this->container['preferred_broker'] = $preferred_broker;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Must be an ISO 4217 currency code
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        if ((!preg_match("/^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNH|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RMB|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|XSU|YER|ZAR|ZMW|ZWL)$/", ObjectSerializer::toString($currency)))) {
            throw new \InvalidArgumentException("invalid value for \$currency when calling SecurityReturnSchema., must conform to the pattern /^(AED|AFN|ALL|AMD|ANG|AOA|ARS|AUD|AWG|AZN|BAM|BBD|BDT|BGN|BHD|BIF|BMD|BND|BOB|BOV|BRL|BSD|BTN|BWP|BYN|BZD|CAD|CDF|CHE|CHF|CHW|CLF|CLP|CNH|CNY|COP|COU|CRC|CUC|CUP|CVE|CZK|DJF|DKK|DOP|DZD|EGP|ERN|ETB|EUR|FJD|FKP|GBP|GEL|GHS|GIP|GMD|GNF|GTQ|GYD|HKD|HNL|HRK|HTG|HUF|IDR|ILS|INR|IQD|IRR|ISK|JMD|JOD|JPY|KES|KGS|KHR|KMF|KPW|KRW|KWD|KYD|KZT|LAK|LBP|LKR|LRD|LSL|LYD|MAD|MDL|MGA|MKD|MMK|MNT|MOP|MRU|MUR|MVR|MWK|MXN|MXV|MYR|MZN|NAD|NGN|NIO|NOK|NPR|NZD|OMR|PAB|PEN|PGK|PHP|PKR|PLN|PYG|QAR|RMB|RON|RSD|RUB|RWF|SAR|SBD|SCR|SDG|SEK|SGD|SHP|SLL|SOS|SRD|SSP|STN|SVC|SYP|SZL|THB|TJS|TMT|TND|TOP|TRY|TTD|TWD|TZS|UAH|UGX|USD|USN|UYI|UYU|UYW|UZS|VES|VND|VUV|WST|XAF|XCD|XDR|XOF|XPF|XSU|YER|ZAR|ZMW|ZWL)$/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets bb_code
     *
     * @return string|null
     */
    public function getBbCode()
    {
        return $this->container['bb_code'];
    }

    /**
     * Sets bb_code
     *
     * @param string|null $bb_code bb_code
     *
     * @return self
     */
    public function setBbCode($bb_code)
    {
        if (is_null($bb_code)) {
            throw new \InvalidArgumentException('non-nullable bb_code cannot be null');
        }
        $this->container['bb_code'] = $bb_code;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime $date_updated date_updated
     *
     * @return self
     */
    public function setDateUpdated($date_updated)
    {
        if (is_null($date_updated)) {
            throw new \InvalidArgumentException('non-nullable date_updated cannot be null');
        }
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\SecurityAttributeReturnSchema|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\SecurityAttributeReturnSchema|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            throw new \InvalidArgumentException('non-nullable attributes cannot be null');
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \OpenAPI\Client\Model\SecurityNoteReturnSchema[]|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \OpenAPI\Client\Model\SecurityNoteReturnSchema[]|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            throw new \InvalidArgumentException('non-nullable notes cannot be null');
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets accesses
     *
     * @return \OpenAPI\Client\Model\NestedSecurityAccessReturnSchema[]|null
     */
    public function getAccesses()
    {
        return $this->container['accesses'];
    }

    /**
     * Sets accesses
     *
     * @param \OpenAPI\Client\Model\NestedSecurityAccessReturnSchema[]|null $accesses accesses
     *
     * @return self
     */
    public function setAccesses($accesses)
    {
        if (is_null($accesses)) {
            throw new \InvalidArgumentException('non-nullable accesses cannot be null');
        }
        $this->container['accesses'] = $accesses;

        return $this;
    }

    /**
     * Gets latest_cost
     *
     * @return \OpenAPI\Client\Model\SecurityCostReturnSchema|null
     */
    public function getLatestCost()
    {
        return $this->container['latest_cost'];
    }

    /**
     * Sets latest_cost
     *
     * @param \OpenAPI\Client\Model\SecurityCostReturnSchema|null $latest_cost latest_cost
     *
     * @return self
     */
    public function setLatestCost($latest_cost)
    {
        if (is_null($latest_cost)) {
            throw new \InvalidArgumentException('non-nullable latest_cost cannot be null');
        }
        $this->container['latest_cost'] = $latest_cost;

        return $this;
    }

    /**
     * Gets latest_valuation
     *
     * @return \OpenAPI\Client\Model\SecurityValuationReturnSchema|null
     */
    public function getLatestValuation()
    {
        return $this->container['latest_valuation'];
    }

    /**
     * Sets latest_valuation
     *
     * @param \OpenAPI\Client\Model\SecurityValuationReturnSchema|null $latest_valuation latest_valuation
     *
     * @return self
     */
    public function setLatestValuation($latest_valuation)
    {
        if (is_null($latest_valuation)) {
            throw new \InvalidArgumentException('non-nullable latest_valuation cannot be null');
        }
        $this->container['latest_valuation'] = $latest_valuation;

        return $this;
    }

    /**
     * Gets asset_class
     *
     * @return \OpenAPI\Client\Model\NestedAssetClassReturnSchema|null
     */
    public function getAssetClass()
    {
        return $this->container['asset_class'];
    }

    /**
     * Sets asset_class
     *
     * @param \OpenAPI\Client\Model\NestedAssetClassReturnSchema|null $asset_class asset_class
     *
     * @return self
     */
    public function setAssetClass($asset_class)
    {
        if (is_null($asset_class)) {
            throw new \InvalidArgumentException('non-nullable asset_class cannot be null');
        }
        $this->container['asset_class'] = $asset_class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


