<?php
/**
 * SecurityEventCreateSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SecurityEventCreateSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SecurityEventCreateSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SecurityEventCreateSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'security_id' => 'int',
        'ex_date' => '\DateTime',
        'event_type' => '\OpenAPI\Client\Model\FapiDbSecuritySecurityEventEventType',
        'event_rate' => 'float',
        'prev_ex_div_date' => '\DateTime',
        'broker' => 'string',
        'broker_ca_id' => 'string',
        'total_units' => 'float',
        'group1_units' => 'float',
        'group2_units' => 'float',
        'gross_amount' => 'float',
        'net_amount' => 'float',
        'equalization_amount' => 'float',
        'exchange_rate' => 'float',
        'gbp_settlement_amount' => 'float',
        'settlement_date' => '\DateTime',
        'status' => '\OpenAPI\Client\Model\FapiDbSecuritySecurityEventStatus',
        'updated_on' => '\DateTime',
        'event_ccy' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'security_id' => null,
        'ex_date' => 'date',
        'event_type' => null,
        'event_rate' => null,
        'prev_ex_div_date' => 'date',
        'broker' => null,
        'broker_ca_id' => null,
        'total_units' => null,
        'group1_units' => null,
        'group2_units' => null,
        'gross_amount' => null,
        'net_amount' => null,
        'equalization_amount' => null,
        'exchange_rate' => null,
        'gbp_settlement_amount' => null,
        'settlement_date' => 'date',
        'status' => null,
        'updated_on' => 'date-time',
        'event_ccy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'security_id' => false,
        'ex_date' => false,
        'event_type' => false,
        'event_rate' => false,
        'prev_ex_div_date' => false,
        'broker' => false,
        'broker_ca_id' => false,
        'total_units' => false,
        'group1_units' => false,
        'group2_units' => false,
        'gross_amount' => false,
        'net_amount' => false,
        'equalization_amount' => false,
        'exchange_rate' => false,
        'gbp_settlement_amount' => false,
        'settlement_date' => false,
        'status' => false,
        'updated_on' => false,
        'event_ccy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'security_id' => 'security_id',
        'ex_date' => 'ex_date',
        'event_type' => 'event_type',
        'event_rate' => 'event_rate',
        'prev_ex_div_date' => 'prev_ex_div_date',
        'broker' => 'broker',
        'broker_ca_id' => 'broker_ca_id',
        'total_units' => 'total_units',
        'group1_units' => 'group1_units',
        'group2_units' => 'group2_units',
        'gross_amount' => 'gross_amount',
        'net_amount' => 'net_amount',
        'equalization_amount' => 'equalization_amount',
        'exchange_rate' => 'exchange_rate',
        'gbp_settlement_amount' => 'gbp_settlement_amount',
        'settlement_date' => 'settlement_date',
        'status' => 'status',
        'updated_on' => 'updated_on',
        'event_ccy' => 'event_ccy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'security_id' => 'setSecurityId',
        'ex_date' => 'setExDate',
        'event_type' => 'setEventType',
        'event_rate' => 'setEventRate',
        'prev_ex_div_date' => 'setPrevExDivDate',
        'broker' => 'setBroker',
        'broker_ca_id' => 'setBrokerCaId',
        'total_units' => 'setTotalUnits',
        'group1_units' => 'setGroup1Units',
        'group2_units' => 'setGroup2Units',
        'gross_amount' => 'setGrossAmount',
        'net_amount' => 'setNetAmount',
        'equalization_amount' => 'setEqualizationAmount',
        'exchange_rate' => 'setExchangeRate',
        'gbp_settlement_amount' => 'setGbpSettlementAmount',
        'settlement_date' => 'setSettlementDate',
        'status' => 'setStatus',
        'updated_on' => 'setUpdatedOn',
        'event_ccy' => 'setEventCcy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'security_id' => 'getSecurityId',
        'ex_date' => 'getExDate',
        'event_type' => 'getEventType',
        'event_rate' => 'getEventRate',
        'prev_ex_div_date' => 'getPrevExDivDate',
        'broker' => 'getBroker',
        'broker_ca_id' => 'getBrokerCaId',
        'total_units' => 'getTotalUnits',
        'group1_units' => 'getGroup1Units',
        'group2_units' => 'getGroup2Units',
        'gross_amount' => 'getGrossAmount',
        'net_amount' => 'getNetAmount',
        'equalization_amount' => 'getEqualizationAmount',
        'exchange_rate' => 'getExchangeRate',
        'gbp_settlement_amount' => 'getGbpSettlementAmount',
        'settlement_date' => 'getSettlementDate',
        'status' => 'getStatus',
        'updated_on' => 'getUpdatedOn',
        'event_ccy' => 'getEventCcy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('security_id', $data ?? [], null);
        $this->setIfExists('ex_date', $data ?? [], null);
        $this->setIfExists('event_type', $data ?? [], null);
        $this->setIfExists('event_rate', $data ?? [], null);
        $this->setIfExists('prev_ex_div_date', $data ?? [], null);
        $this->setIfExists('broker', $data ?? [], null);
        $this->setIfExists('broker_ca_id', $data ?? [], null);
        $this->setIfExists('total_units', $data ?? [], null);
        $this->setIfExists('group1_units', $data ?? [], null);
        $this->setIfExists('group2_units', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('equalization_amount', $data ?? [], null);
        $this->setIfExists('exchange_rate', $data ?? [], null);
        $this->setIfExists('gbp_settlement_amount', $data ?? [], null);
        $this->setIfExists('settlement_date', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('updated_on', $data ?? [], null);
        $this->setIfExists('event_ccy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['security_id'] === null) {
            $invalidProperties[] = "'security_id' can't be null";
        }
        if ($this->container['ex_date'] === null) {
            $invalidProperties[] = "'ex_date' can't be null";
        }
        if ($this->container['event_type'] === null) {
            $invalidProperties[] = "'event_type' can't be null";
        }
        if ($this->container['event_rate'] === null) {
            $invalidProperties[] = "'event_rate' can't be null";
        }
        if ($this->container['broker'] === null) {
            $invalidProperties[] = "'broker' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets security_id
     *
     * @return int
     */
    public function getSecurityId()
    {
        return $this->container['security_id'];
    }

    /**
     * Sets security_id
     *
     * @param int $security_id Security ID
     *
     * @return self
     */
    public function setSecurityId($security_id)
    {
        if (is_null($security_id)) {
            throw new \InvalidArgumentException('non-nullable security_id cannot be null');
        }
        $this->container['security_id'] = $security_id;

        return $this;
    }

    /**
     * Gets ex_date
     *
     * @return \DateTime
     */
    public function getExDate()
    {
        return $this->container['ex_date'];
    }

    /**
     * Sets ex_date
     *
     * @param \DateTime $ex_date Last updated time
     *
     * @return self
     */
    public function setExDate($ex_date)
    {
        if (is_null($ex_date)) {
            throw new \InvalidArgumentException('non-nullable ex_date cannot be null');
        }
        $this->container['ex_date'] = $ex_date;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return \OpenAPI\Client\Model\FapiDbSecuritySecurityEventEventType
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param \OpenAPI\Client\Model\FapiDbSecuritySecurityEventEventType $event_type event_type
     *
     * @return self
     */
    public function setEventType($event_type)
    {
        if (is_null($event_type)) {
            throw new \InvalidArgumentException('non-nullable event_type cannot be null');
        }
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets event_rate
     *
     * @return float
     */
    public function getEventRate()
    {
        return $this->container['event_rate'];
    }

    /**
     * Sets event_rate
     *
     * @param float $event_rate event_rate
     *
     * @return self
     */
    public function setEventRate($event_rate)
    {
        if (is_null($event_rate)) {
            throw new \InvalidArgumentException('non-nullable event_rate cannot be null');
        }
        $this->container['event_rate'] = $event_rate;

        return $this;
    }

    /**
     * Gets prev_ex_div_date
     *
     * @return \DateTime|null
     */
    public function getPrevExDivDate()
    {
        return $this->container['prev_ex_div_date'];
    }

    /**
     * Sets prev_ex_div_date
     *
     * @param \DateTime|null $prev_ex_div_date prev_ex_div_date
     *
     * @return self
     */
    public function setPrevExDivDate($prev_ex_div_date)
    {
        if (is_null($prev_ex_div_date)) {
            throw new \InvalidArgumentException('non-nullable prev_ex_div_date cannot be null');
        }
        $this->container['prev_ex_div_date'] = $prev_ex_div_date;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return string
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param string $broker broker
     *
     * @return self
     */
    public function setBroker($broker)
    {
        if (is_null($broker)) {
            throw new \InvalidArgumentException('non-nullable broker cannot be null');
        }
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets broker_ca_id
     *
     * @return string|null
     */
    public function getBrokerCaId()
    {
        return $this->container['broker_ca_id'];
    }

    /**
     * Sets broker_ca_id
     *
     * @param string|null $broker_ca_id broker_ca_id
     *
     * @return self
     */
    public function setBrokerCaId($broker_ca_id)
    {
        if (is_null($broker_ca_id)) {
            throw new \InvalidArgumentException('non-nullable broker_ca_id cannot be null');
        }
        $this->container['broker_ca_id'] = $broker_ca_id;

        return $this;
    }

    /**
     * Gets total_units
     *
     * @return float|null
     */
    public function getTotalUnits()
    {
        return $this->container['total_units'];
    }

    /**
     * Sets total_units
     *
     * @param float|null $total_units total_units
     *
     * @return self
     */
    public function setTotalUnits($total_units)
    {
        if (is_null($total_units)) {
            throw new \InvalidArgumentException('non-nullable total_units cannot be null');
        }
        $this->container['total_units'] = $total_units;

        return $this;
    }

    /**
     * Gets group1_units
     *
     * @return float|null
     */
    public function getGroup1Units()
    {
        return $this->container['group1_units'];
    }

    /**
     * Sets group1_units
     *
     * @param float|null $group1_units group1_units
     *
     * @return self
     */
    public function setGroup1Units($group1_units)
    {
        if (is_null($group1_units)) {
            throw new \InvalidArgumentException('non-nullable group1_units cannot be null');
        }
        $this->container['group1_units'] = $group1_units;

        return $this;
    }

    /**
     * Gets group2_units
     *
     * @return float|null
     */
    public function getGroup2Units()
    {
        return $this->container['group2_units'];
    }

    /**
     * Sets group2_units
     *
     * @param float|null $group2_units group2_units
     *
     * @return self
     */
    public function setGroup2Units($group2_units)
    {
        if (is_null($group2_units)) {
            throw new \InvalidArgumentException('non-nullable group2_units cannot be null');
        }
        $this->container['group2_units'] = $group2_units;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float|null
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float|null $net_amount net_amount
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets equalization_amount
     *
     * @return float|null
     */
    public function getEqualizationAmount()
    {
        return $this->container['equalization_amount'];
    }

    /**
     * Sets equalization_amount
     *
     * @param float|null $equalization_amount equalization_amount
     *
     * @return self
     */
    public function setEqualizationAmount($equalization_amount)
    {
        if (is_null($equalization_amount)) {
            throw new \InvalidArgumentException('non-nullable equalization_amount cannot be null');
        }
        $this->container['equalization_amount'] = $equalization_amount;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float|null $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        if (is_null($exchange_rate)) {
            throw new \InvalidArgumentException('non-nullable exchange_rate cannot be null');
        }
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets gbp_settlement_amount
     *
     * @return float|null
     */
    public function getGbpSettlementAmount()
    {
        return $this->container['gbp_settlement_amount'];
    }

    /**
     * Sets gbp_settlement_amount
     *
     * @param float|null $gbp_settlement_amount gbp_settlement_amount
     *
     * @return self
     */
    public function setGbpSettlementAmount($gbp_settlement_amount)
    {
        if (is_null($gbp_settlement_amount)) {
            throw new \InvalidArgumentException('non-nullable gbp_settlement_amount cannot be null');
        }
        $this->container['gbp_settlement_amount'] = $gbp_settlement_amount;

        return $this;
    }

    /**
     * Gets settlement_date
     *
     * @return \DateTime|null
     */
    public function getSettlementDate()
    {
        return $this->container['settlement_date'];
    }

    /**
     * Sets settlement_date
     *
     * @param \DateTime|null $settlement_date settlement_date
     *
     * @return self
     */
    public function setSettlementDate($settlement_date)
    {
        if (is_null($settlement_date)) {
            throw new \InvalidArgumentException('non-nullable settlement_date cannot be null');
        }
        $this->container['settlement_date'] = $settlement_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\FapiDbSecuritySecurityEventStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\FapiDbSecuritySecurityEventStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets updated_on
     *
     * @return \DateTime|null
     */
    public function getUpdatedOn()
    {
        return $this->container['updated_on'];
    }

    /**
     * Sets updated_on
     *
     * @param \DateTime|null $updated_on updated_on
     *
     * @return self
     */
    public function setUpdatedOn($updated_on)
    {
        if (is_null($updated_on)) {
            throw new \InvalidArgumentException('non-nullable updated_on cannot be null');
        }
        $this->container['updated_on'] = $updated_on;

        return $this;
    }

    /**
     * Gets event_ccy
     *
     * @return string|null
     */
    public function getEventCcy()
    {
        return $this->container['event_ccy'];
    }

    /**
     * Sets event_ccy
     *
     * @param string|null $event_ccy event_ccy
     *
     * @return self
     */
    public function setEventCcy($event_ccy)
    {
        if (is_null($event_ccy)) {
            throw new \InvalidArgumentException('non-nullable event_ccy cannot be null');
        }
        $this->container['event_ccy'] = $event_ccy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


