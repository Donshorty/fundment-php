<?php
/**
 * AccountTypeReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountTypeReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountTypeReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountTypeReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'gia' => 'bool',
        'isa' => 'bool',
        'jisa' => 'bool',
        'pension' => 'bool',
        'ofb' => 'bool',
        'ssas' => 'bool',
        'jpp' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'gia' => null,
        'isa' => null,
        'jisa' => null,
        'pension' => null,
        'ofb' => null,
        'ssas' => null,
        'jpp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'gia' => false,
        'isa' => false,
        'jisa' => false,
        'pension' => false,
        'ofb' => false,
        'ssas' => false,
        'jpp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gia' => 'GIA',
        'isa' => 'ISA',
        'jisa' => 'JISA',
        'pension' => 'PENSION',
        'ofb' => 'OFB',
        'ssas' => 'SSAS',
        'jpp' => 'JPP'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gia' => 'setGia',
        'isa' => 'setIsa',
        'jisa' => 'setJisa',
        'pension' => 'setPension',
        'ofb' => 'setOfb',
        'ssas' => 'setSsas',
        'jpp' => 'setJpp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gia' => 'getGia',
        'isa' => 'getIsa',
        'jisa' => 'getJisa',
        'pension' => 'getPension',
        'ofb' => 'getOfb',
        'ssas' => 'getSsas',
        'jpp' => 'getJpp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('gia', $data ?? [], false);
        $this->setIfExists('isa', $data ?? [], false);
        $this->setIfExists('jisa', $data ?? [], false);
        $this->setIfExists('pension', $data ?? [], false);
        $this->setIfExists('ofb', $data ?? [], false);
        $this->setIfExists('ssas', $data ?? [], false);
        $this->setIfExists('jpp', $data ?? [], false);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gia
     *
     * @return bool|null
     */
    public function getGia()
    {
        return $this->container['gia'];
    }

    /**
     * Sets gia
     *
     * @param bool|null $gia gia
     *
     * @return self
     */
    public function setGia($gia)
    {
        if (is_null($gia)) {
            throw new \InvalidArgumentException('non-nullable gia cannot be null');
        }
        $this->container['gia'] = $gia;

        return $this;
    }

    /**
     * Gets isa
     *
     * @return bool|null
     */
    public function getIsa()
    {
        return $this->container['isa'];
    }

    /**
     * Sets isa
     *
     * @param bool|null $isa isa
     *
     * @return self
     */
    public function setIsa($isa)
    {
        if (is_null($isa)) {
            throw new \InvalidArgumentException('non-nullable isa cannot be null');
        }
        $this->container['isa'] = $isa;

        return $this;
    }

    /**
     * Gets jisa
     *
     * @return bool|null
     */
    public function getJisa()
    {
        return $this->container['jisa'];
    }

    /**
     * Sets jisa
     *
     * @param bool|null $jisa jisa
     *
     * @return self
     */
    public function setJisa($jisa)
    {
        if (is_null($jisa)) {
            throw new \InvalidArgumentException('non-nullable jisa cannot be null');
        }
        $this->container['jisa'] = $jisa;

        return $this;
    }

    /**
     * Gets pension
     *
     * @return bool|null
     */
    public function getPension()
    {
        return $this->container['pension'];
    }

    /**
     * Sets pension
     *
     * @param bool|null $pension pension
     *
     * @return self
     */
    public function setPension($pension)
    {
        if (is_null($pension)) {
            throw new \InvalidArgumentException('non-nullable pension cannot be null');
        }
        $this->container['pension'] = $pension;

        return $this;
    }

    /**
     * Gets ofb
     *
     * @return bool|null
     */
    public function getOfb()
    {
        return $this->container['ofb'];
    }

    /**
     * Sets ofb
     *
     * @param bool|null $ofb ofb
     *
     * @return self
     */
    public function setOfb($ofb)
    {
        if (is_null($ofb)) {
            throw new \InvalidArgumentException('non-nullable ofb cannot be null');
        }
        $this->container['ofb'] = $ofb;

        return $this;
    }

    /**
     * Gets ssas
     *
     * @return bool|null
     */
    public function getSsas()
    {
        return $this->container['ssas'];
    }

    /**
     * Sets ssas
     *
     * @param bool|null $ssas ssas
     *
     * @return self
     */
    public function setSsas($ssas)
    {
        if (is_null($ssas)) {
            throw new \InvalidArgumentException('non-nullable ssas cannot be null');
        }
        $this->container['ssas'] = $ssas;

        return $this;
    }

    /**
     * Gets jpp
     *
     * @return bool|null
     */
    public function getJpp()
    {
        return $this->container['jpp'];
    }

    /**
     * Sets jpp
     *
     * @param bool|null $jpp jpp
     *
     * @return self
     */
    public function setJpp($jpp)
    {
        if (is_null($jpp)) {
            throw new \InvalidArgumentException('non-nullable jpp cannot be null');
        }
        $this->container['jpp'] = $jpp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


