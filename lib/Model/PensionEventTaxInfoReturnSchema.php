<?php
/**
 * PensionEventTaxInfoReturnSchema
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Fundment API
 *
 * <div><a href=\"/staging/\"><h1>Getting started</h1></a> </div>
 *
 * The version of the OpenAPI document: 3
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PensionEventTaxInfoReturnSchema Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PensionEventTaxInfoReturnSchema implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PensionEventTaxInfoReturnSchema';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'altus_ref' => 'string',
        'gross_amount' => 'float',
        'tax_free_amount' => 'float',
        'tax_deducted' => 'float',
        'tax_code' => 'string',
        'initial_tax_code' => 'string',
        'total_pay_ytd' => 'float',
        'taxable_pay_ytd' => 'float',
        'net_pay_ytd' => 'float',
        'tax_due_ytd' => 'float',
        'tax_paid_ytd' => 'float',
        'tax_outstanding' => 'float',
        'id' => 'int',
        'date_created' => '\DateTime',
        'date_updated' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'altus_ref' => null,
        'gross_amount' => null,
        'tax_free_amount' => null,
        'tax_deducted' => null,
        'tax_code' => null,
        'initial_tax_code' => null,
        'total_pay_ytd' => null,
        'taxable_pay_ytd' => null,
        'net_pay_ytd' => null,
        'tax_due_ytd' => null,
        'tax_paid_ytd' => null,
        'tax_outstanding' => null,
        'id' => null,
        'date_created' => 'date-time',
        'date_updated' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'altus_ref' => false,
        'gross_amount' => false,
        'tax_free_amount' => false,
        'tax_deducted' => false,
        'tax_code' => false,
        'initial_tax_code' => false,
        'total_pay_ytd' => false,
        'taxable_pay_ytd' => false,
        'net_pay_ytd' => false,
        'tax_due_ytd' => false,
        'tax_paid_ytd' => false,
        'tax_outstanding' => false,
        'id' => false,
        'date_created' => false,
        'date_updated' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'altus_ref' => 'altus_ref',
        'gross_amount' => 'gross_amount',
        'tax_free_amount' => 'tax_free_amount',
        'tax_deducted' => 'tax_deducted',
        'tax_code' => 'tax_code',
        'initial_tax_code' => 'initial_tax_code',
        'total_pay_ytd' => 'total_pay_ytd',
        'taxable_pay_ytd' => 'taxable_pay_ytd',
        'net_pay_ytd' => 'net_pay_ytd',
        'tax_due_ytd' => 'tax_due_ytd',
        'tax_paid_ytd' => 'tax_paid_ytd',
        'tax_outstanding' => 'tax_outstanding',
        'id' => 'id',
        'date_created' => 'date_created',
        'date_updated' => 'date_updated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'altus_ref' => 'setAltusRef',
        'gross_amount' => 'setGrossAmount',
        'tax_free_amount' => 'setTaxFreeAmount',
        'tax_deducted' => 'setTaxDeducted',
        'tax_code' => 'setTaxCode',
        'initial_tax_code' => 'setInitialTaxCode',
        'total_pay_ytd' => 'setTotalPayYtd',
        'taxable_pay_ytd' => 'setTaxablePayYtd',
        'net_pay_ytd' => 'setNetPayYtd',
        'tax_due_ytd' => 'setTaxDueYtd',
        'tax_paid_ytd' => 'setTaxPaidYtd',
        'tax_outstanding' => 'setTaxOutstanding',
        'id' => 'setId',
        'date_created' => 'setDateCreated',
        'date_updated' => 'setDateUpdated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'altus_ref' => 'getAltusRef',
        'gross_amount' => 'getGrossAmount',
        'tax_free_amount' => 'getTaxFreeAmount',
        'tax_deducted' => 'getTaxDeducted',
        'tax_code' => 'getTaxCode',
        'initial_tax_code' => 'getInitialTaxCode',
        'total_pay_ytd' => 'getTotalPayYtd',
        'taxable_pay_ytd' => 'getTaxablePayYtd',
        'net_pay_ytd' => 'getNetPayYtd',
        'tax_due_ytd' => 'getTaxDueYtd',
        'tax_paid_ytd' => 'getTaxPaidYtd',
        'tax_outstanding' => 'getTaxOutstanding',
        'id' => 'getId',
        'date_created' => 'getDateCreated',
        'date_updated' => 'getDateUpdated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('altus_ref', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('tax_free_amount', $data ?? [], null);
        $this->setIfExists('tax_deducted', $data ?? [], null);
        $this->setIfExists('tax_code', $data ?? [], null);
        $this->setIfExists('initial_tax_code', $data ?? [], null);
        $this->setIfExists('total_pay_ytd', $data ?? [], null);
        $this->setIfExists('taxable_pay_ytd', $data ?? [], null);
        $this->setIfExists('net_pay_ytd', $data ?? [], null);
        $this->setIfExists('tax_due_ytd', $data ?? [], null);
        $this->setIfExists('tax_paid_ytd', $data ?? [], null);
        $this->setIfExists('tax_outstanding', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_updated', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets altus_ref
     *
     * @return string|null
     */
    public function getAltusRef()
    {
        return $this->container['altus_ref'];
    }

    /**
     * Sets altus_ref
     *
     * @param string|null $altus_ref altus_ref
     *
     * @return self
     */
    public function setAltusRef($altus_ref)
    {
        if (is_null($altus_ref)) {
            throw new \InvalidArgumentException('non-nullable altus_ref cannot be null');
        }
        $this->container['altus_ref'] = $altus_ref;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float|null
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float|null $gross_amount gross_amount
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets tax_free_amount
     *
     * @return float|null
     */
    public function getTaxFreeAmount()
    {
        return $this->container['tax_free_amount'];
    }

    /**
     * Sets tax_free_amount
     *
     * @param float|null $tax_free_amount tax_free_amount
     *
     * @return self
     */
    public function setTaxFreeAmount($tax_free_amount)
    {
        if (is_null($tax_free_amount)) {
            throw new \InvalidArgumentException('non-nullable tax_free_amount cannot be null');
        }
        $this->container['tax_free_amount'] = $tax_free_amount;

        return $this;
    }

    /**
     * Gets tax_deducted
     *
     * @return float|null
     */
    public function getTaxDeducted()
    {
        return $this->container['tax_deducted'];
    }

    /**
     * Sets tax_deducted
     *
     * @param float|null $tax_deducted tax_deducted
     *
     * @return self
     */
    public function setTaxDeducted($tax_deducted)
    {
        if (is_null($tax_deducted)) {
            throw new \InvalidArgumentException('non-nullable tax_deducted cannot be null');
        }
        $this->container['tax_deducted'] = $tax_deducted;

        return $this;
    }

    /**
     * Gets tax_code
     *
     * @return string|null
     */
    public function getTaxCode()
    {
        return $this->container['tax_code'];
    }

    /**
     * Sets tax_code
     *
     * @param string|null $tax_code tax_code
     *
     * @return self
     */
    public function setTaxCode($tax_code)
    {
        if (is_null($tax_code)) {
            throw new \InvalidArgumentException('non-nullable tax_code cannot be null');
        }
        $this->container['tax_code'] = $tax_code;

        return $this;
    }

    /**
     * Gets initial_tax_code
     *
     * @return string|null
     */
    public function getInitialTaxCode()
    {
        return $this->container['initial_tax_code'];
    }

    /**
     * Sets initial_tax_code
     *
     * @param string|null $initial_tax_code initial_tax_code
     *
     * @return self
     */
    public function setInitialTaxCode($initial_tax_code)
    {
        if (is_null($initial_tax_code)) {
            throw new \InvalidArgumentException('non-nullable initial_tax_code cannot be null');
        }
        $this->container['initial_tax_code'] = $initial_tax_code;

        return $this;
    }

    /**
     * Gets total_pay_ytd
     *
     * @return float|null
     */
    public function getTotalPayYtd()
    {
        return $this->container['total_pay_ytd'];
    }

    /**
     * Sets total_pay_ytd
     *
     * @param float|null $total_pay_ytd total_pay_ytd
     *
     * @return self
     */
    public function setTotalPayYtd($total_pay_ytd)
    {
        if (is_null($total_pay_ytd)) {
            throw new \InvalidArgumentException('non-nullable total_pay_ytd cannot be null');
        }
        $this->container['total_pay_ytd'] = $total_pay_ytd;

        return $this;
    }

    /**
     * Gets taxable_pay_ytd
     *
     * @return float|null
     */
    public function getTaxablePayYtd()
    {
        return $this->container['taxable_pay_ytd'];
    }

    /**
     * Sets taxable_pay_ytd
     *
     * @param float|null $taxable_pay_ytd taxable_pay_ytd
     *
     * @return self
     */
    public function setTaxablePayYtd($taxable_pay_ytd)
    {
        if (is_null($taxable_pay_ytd)) {
            throw new \InvalidArgumentException('non-nullable taxable_pay_ytd cannot be null');
        }
        $this->container['taxable_pay_ytd'] = $taxable_pay_ytd;

        return $this;
    }

    /**
     * Gets net_pay_ytd
     *
     * @return float|null
     */
    public function getNetPayYtd()
    {
        return $this->container['net_pay_ytd'];
    }

    /**
     * Sets net_pay_ytd
     *
     * @param float|null $net_pay_ytd net_pay_ytd
     *
     * @return self
     */
    public function setNetPayYtd($net_pay_ytd)
    {
        if (is_null($net_pay_ytd)) {
            throw new \InvalidArgumentException('non-nullable net_pay_ytd cannot be null');
        }
        $this->container['net_pay_ytd'] = $net_pay_ytd;

        return $this;
    }

    /**
     * Gets tax_due_ytd
     *
     * @return float|null
     */
    public function getTaxDueYtd()
    {
        return $this->container['tax_due_ytd'];
    }

    /**
     * Sets tax_due_ytd
     *
     * @param float|null $tax_due_ytd tax_due_ytd
     *
     * @return self
     */
    public function setTaxDueYtd($tax_due_ytd)
    {
        if (is_null($tax_due_ytd)) {
            throw new \InvalidArgumentException('non-nullable tax_due_ytd cannot be null');
        }
        $this->container['tax_due_ytd'] = $tax_due_ytd;

        return $this;
    }

    /**
     * Gets tax_paid_ytd
     *
     * @return float|null
     */
    public function getTaxPaidYtd()
    {
        return $this->container['tax_paid_ytd'];
    }

    /**
     * Sets tax_paid_ytd
     *
     * @param float|null $tax_paid_ytd tax_paid_ytd
     *
     * @return self
     */
    public function setTaxPaidYtd($tax_paid_ytd)
    {
        if (is_null($tax_paid_ytd)) {
            throw new \InvalidArgumentException('non-nullable tax_paid_ytd cannot be null');
        }
        $this->container['tax_paid_ytd'] = $tax_paid_ytd;

        return $this;
    }

    /**
     * Gets tax_outstanding
     *
     * @return float|null
     */
    public function getTaxOutstanding()
    {
        return $this->container['tax_outstanding'];
    }

    /**
     * Sets tax_outstanding
     *
     * @param float|null $tax_outstanding tax_outstanding
     *
     * @return self
     */
    public function setTaxOutstanding($tax_outstanding)
    {
        if (is_null($tax_outstanding)) {
            throw new \InvalidArgumentException('non-nullable tax_outstanding cannot be null');
        }
        $this->container['tax_outstanding'] = $tax_outstanding;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime|null
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime|null $date_updated date_updated
     *
     * @return self
     */
    public function setDateUpdated($date_updated)
    {
        if (is_null($date_updated)) {
            throw new \InvalidArgumentException('non-nullable date_updated cannot be null');
        }
        $this->container['date_updated'] = $date_updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


